# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 8):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template types.py.jinja --
from .utils import _NoneType



# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortOrder = Literal['asc', 'desc']


    

class StringFilter(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive1']


class StringFilterRecursive1(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive2']


class StringFilterRecursive2(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    
    

class DateTimeFilter(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive1'


class DateTimeFilterRecursive1(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive2'


class DateTimeFilterRecursive2(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    

    

class BooleanFilter(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive1']


class BooleanFilterRecursive1(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive2']


class BooleanFilterRecursive2(TypedDict, total=False):
    equals: bool
    

    

class IntFilter(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive1']


class IntFilterRecursive1(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive2']


class IntFilterRecursive2(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    

    

class FloatFilter(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive1']


class FloatFilterRecursive1(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive2']


class FloatFilterRecursive2(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: Optional[int]
    created_at: Optional[datetime.datetime]
    content: Optional[str]
    published: Optional[bool]
    author: Optional['UserCreateNestedWithoutRelationsInput']


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    title: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: Optional[int]
    created_at: Optional[datetime.datetime]
    content: Optional[str]
    published: Optional[bool]


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    title: str


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['PostCreateWithoutRelationsInput']
    connect: Optional['PostWhereUniqueInput']


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]]
    connect: Optional[Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class PostWhereUniqueInput(TypedDict, total=False):
    """Unique Post arguments for searching"""
    id: int


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    created_at: Optional[datetime.datetime]
    title: Optional[str]
    content: Optional[str]
    published: Optional[Union['PostUpdatepublishedInput', bool]]
    author: Optional['UserUpdateOneWithoutRelationsInput']


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['PostUpdateidInput', int]]
    created_at: Optional[datetime.datetime]
    title: Optional[str]
    content: Optional[str]
    published: Optional[Union['PostUpdatepublishedInput', bool]]
    author: Optional['UserUpdateOneWithoutRelationsInput']


class PostUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class PostUpdatepublishedInput(TypedDict, total=False):
    set: bool
class PostUpdateauthor_idInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict, total=False):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class PostOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    created_at: Optional['SortOrder']
    title: Optional['SortOrder']
    content: Optional['SortOrder']
    published: Optional['SortOrder']
    author_id: Optional['SortOrder']


# recursive Post types
# TODO: cleanup these types


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    author: Union[bool, 'UserArgsFromPost']


    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    n: Union[bool, 'FindManyNArgsFromPostRecursive1']


class MIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    n: Union[bool, 'FindManyNArgsFromPostRecursive2']


class MIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class MArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyMArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    m: Union[bool, 'FindManyMArgsFromPostRecursive1']


class NIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    m: Union[bool, 'FindManyMArgsFromPostRecursive2']


class NIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class NArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyNArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    many: Union[bool, 'FindManyManyRequiredArgsFromPostRecursive1']


class OneOptionalIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    many: Union[bool, 'FindManyManyRequiredArgsFromPostRecursive2']


class OneOptionalIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class OneOptionalArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyOneOptionalArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    one: Union[bool, 'OneOptionalArgsFromPostRecursive1']


class ManyRequiredIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    one: Union[bool, 'OneOptionalArgsFromPostRecursive2']


class ManyRequiredIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ManyRequiredArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyManyRequiredArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class AIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class AIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class AArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AIncludeFromARecursive1'


class AArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AIncludeFromARecursive2'


class AArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyAArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class BIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class BIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class BArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyBArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class CIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class CIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class CArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyCArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class DIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class DIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class DArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyDArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class EIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class EIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""

    

class EArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'EIncludeFromERecursive1'


class EArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'EIncludeFromERecursive2'


class EArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyEArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


# TODO: support relationships here
    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    content: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    author_id: Union[int, 'types.IntFilter']

    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    content: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    author_id: Union[int, 'types.IntFilter']

    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    content: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    author_id: Union[int, 'types.IntFilter']


PostKeys = Literal[
    'id',
    'created_at',
    'title',
    'content',
    'published',
    'author',
    'author_id',
]

PostRelationalFieldKeys = Literal[
        'author',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]
    posts: Optional['PostCreateManyNestedWithoutRelationsInput']
    string_list: Optional[List[str]]


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: str
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: str
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['UserCreateWithoutRelationsInput']
    connect: Optional['UserWhereUniqueInput']


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]]
    connect: Optional[Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class UserWhereUniqueInput(TypedDict, total=False):
    """Unique User arguments for searching"""
    id: int
    email: str


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    int: Optional[Union['UserUpdateintInput', int]]
    optional_int: Optional[Union['UserUpdateoptional_intInput', int]]
    float: Optional[Union['UserUpdatefloatInput', float]]
    optional_float: Optional[Union['UserUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['UserUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['UserUpdateoptional_booleanInput', bool]]
    posts: Optional['PostUpdateManyWithoutRelationsInput']
    string_list: Optional[List[str]]


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['UserUpdateidInput', int]]
    email: Optional[str]
    int: Optional[Union['UserUpdateintInput', int]]
    optional_int: Optional[Union['UserUpdateoptional_intInput', int]]
    float: Optional[Union['UserUpdatefloatInput', float]]
    optional_float: Optional[Union['UserUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['UserUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['UserUpdateoptional_booleanInput', bool]]
    posts: Optional['PostUpdateManyWithoutRelationsInput']
    string_list: Optional[List[str]]


class UserUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class UserUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class UserUpdateoptional_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class UserUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class UserUpdateoptional_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class UserUpdatebooleanInput(TypedDict, total=False):
    set: bool
class UserUpdateoptional_booleanInput(TypedDict, total=False):
    set: bool


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict, total=False):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class UserOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    email: Optional['SortOrder']
    int: Optional['SortOrder']
    optional_int: Optional['SortOrder']
    float: Optional['SortOrder']
    optional_float: Optional['SortOrder']
    string: Optional['SortOrder']
    optional_string: Optional['SortOrder']
    enum: Optional['SortOrder']
    optional_enum: Optional['SortOrder']
    boolean: Optional['SortOrder']
    optional_boolean: Optional['SortOrder']
    string_list: Optional['SortOrder']


# recursive User types
# TODO: cleanup these types


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromUser']


    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    n: Union[bool, 'FindManyNArgsFromUserRecursive1']


class MIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    n: Union[bool, 'FindManyNArgsFromUserRecursive2']


class MIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class MArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    m: Union[bool, 'FindManyMArgsFromUserRecursive1']


class NIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    m: Union[bool, 'FindManyMArgsFromUserRecursive2']


class NIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class NArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyNArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    many: Union[bool, 'FindManyManyRequiredArgsFromUserRecursive1']


class OneOptionalIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    many: Union[bool, 'FindManyManyRequiredArgsFromUserRecursive2']


class OneOptionalIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class OneOptionalArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyOneOptionalArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    one: Union[bool, 'OneOptionalArgsFromUserRecursive1']


class ManyRequiredIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    one: Union[bool, 'OneOptionalArgsFromUserRecursive2']


class ManyRequiredIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class ManyRequiredArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyManyRequiredArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class AIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class AIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class AArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AIncludeFromARecursive1'


class AArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AIncludeFromARecursive2'


class AArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class BIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class BIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class BArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyBArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class CIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class CIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class CArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class DIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class DIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class DArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class EIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class EIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class EArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EIncludeFromERecursive1'


class EArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'EIncludeFromERecursive2'


class EArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyEArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


# TODO: support relationships here
    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[int, 'types.IntFilter']
    email: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[int, 'types.IntFilter']
    email: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[int, 'types.IntFilter']
    email: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']


UserKeys = Literal[
    'id',
    'email',
    'int',
    'optional_int',
    'float',
    'optional_float',
    'string',
    'optional_string',
    'enum',
    'optional_enum',
    'boolean',
    'optional_boolean',
    'posts',
]

UserRelationalFieldKeys = Literal[
        'posts',
    ]

# M types

class MOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the M create method"""
    id: Optional[int]
    n: Optional['NCreateManyNestedWithoutRelationsInput']
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class MCreateInput(MOptionalCreateInput):
    """Required arguments to the M create method"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the M create method, without relations"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class MCreateWithoutRelationsInput(MOptionalCreateWithoutRelationsInput):
    """Required arguments to the M create method, without relations"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


class MCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['MCreateWithoutRelationsInput']
    connect: Optional['MWhereUniqueInput']


class MCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['MCreateWithoutRelationsInput', List['MCreateWithoutRelationsInput']]]
    connect: Optional[Union['MWhereUniqueInput', List['MWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class MWhereUniqueInput(TypedDict, total=False):
    """Unique M arguments for searching"""
    id: int


class MUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    n: Optional['NUpdateManyWithoutRelationsInput']
    int: Optional[Union['MUpdateintInput', int]]
    optional_int: Optional[Union['MUpdateoptional_intInput', int]]
    float: Optional[Union['MUpdatefloatInput', float]]
    optional_float: Optional[Union['MUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['MUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['MUpdateoptional_booleanInput', bool]]


class MUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['MUpdateidInput', int]]
    n: Optional['NUpdateManyWithoutRelationsInput']
    int: Optional[Union['MUpdateintInput', int]]
    optional_int: Optional[Union['MUpdateoptional_intInput', int]]
    float: Optional[Union['MUpdatefloatInput', float]]
    optional_float: Optional[Union['MUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['MUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['MUpdateoptional_booleanInput', bool]]


class MUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class MUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class MUpdateoptional_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class MUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class MUpdateoptional_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class MUpdatebooleanInput(TypedDict, total=False):
    set: bool
class MUpdateoptional_booleanInput(TypedDict, total=False):
    set: bool


class MUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MCreateWithoutRelationsInput']
    connect: List['MWhereUniqueInput']
    set: List['MWhereUniqueInput']
    disconnect: List['MWhereUniqueInput']
    delete: List['MWhereUniqueInput']

    # TODO
    # update: List['MUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MScalarWhereInput']
    # upsert: List['MUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['MCreateOrConnectWithoutRelationsInput']


class MUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MCreateWithoutRelationsInput'
    connect: 'MWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MUpdateInput'
    # upsert: 'MUpsertWithoutRelationsInput'
    # connectOrCreate: 'MCreateOrConnectWithoutRelationsInput'


class MUpsertInput(TypedDict, total=False):
    create: 'MCreateInput'
    update: 'MUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class MOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    int: Optional['SortOrder']
    optional_int: Optional['SortOrder']
    float: Optional['SortOrder']
    optional_float: Optional['SortOrder']
    string: Optional['SortOrder']
    optional_string: Optional['SortOrder']
    enum: Optional['SortOrder']
    optional_enum: Optional['SortOrder']
    boolean: Optional['SortOrder']
    optional_boolean: Optional['SortOrder']


# recursive M types
# TODO: cleanup these types


class MInclude(TypedDict, total=False):
    """M relational arguments"""
    n: Union[bool, 'FindManyNArgsFromM']


    

class PostIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    author: Union[bool, 'UserArgsFromMRecursive1']


class PostIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    author: Union[bool, 'UserArgsFromMRecursive2']


class PostIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class PostArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyPostArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    posts: Union[bool, 'FindManyPostArgsFromMRecursive1']


class UserIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    posts: Union[bool, 'FindManyPostArgsFromMRecursive2']


class UserIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class UserArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyUserArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    n: Union[bool, 'FindManyNArgsFromMRecursive1']


class MIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    n: Union[bool, 'FindManyNArgsFromMRecursive2']


class MIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class MArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyMArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    m: Union[bool, 'FindManyMArgsFromMRecursive1']


class NIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    m: Union[bool, 'FindManyMArgsFromMRecursive2']


class NIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class NArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyNArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    many: Union[bool, 'FindManyManyRequiredArgsFromMRecursive1']


class OneOptionalIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    many: Union[bool, 'FindManyManyRequiredArgsFromMRecursive2']


class OneOptionalIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class OneOptionalArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyOneOptionalArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""
    one: Union[bool, 'OneOptionalArgsFromMRecursive1']


class ManyRequiredIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""
    one: Union[bool, 'OneOptionalArgsFromMRecursive2']


class ManyRequiredIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class ManyRequiredArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyManyRequiredArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""


class AIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""


class AIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class AArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'AIncludeFromARecursive1'


class AArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'AIncludeFromARecursive2'


class AArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyAArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""


class BIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""


class BIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class BArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyBArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""


class CIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""


class CIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class CArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyCArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""


class DIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""


class DIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class DArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyDArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromM(TypedDict, total=False):
    """Relational arguments for M"""


class EIncludeFromMRecursive1(TypedDict, total=False):
    """Relational arguments for M"""


class EIncludeFromMRecursive2(TypedDict, total=False):
    """Relational arguments for M"""

    

class EArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    include: 'EIncludeFromERecursive1'


class EArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    include: 'EIncludeFromERecursive2'


class EArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    
    

class FindManyEArgsFromM(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromMRecursive1(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromMRecursive2(TypedDict, total=False):
    """Arguments for M"""
    take: int
    skip: int
    order_by: Union['MOrderByInput', List['MOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyMArgs = FindManyMArgsFromM
FindFirstMArgs = FindManyMArgsFromM


# TODO: support relationships here
    

class MWhereInput(TypedDict, total=False):
    """M arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['MWhereInputRecursive1']
    OR: List['MWhereInputRecursive1']
    NOT: List['MWhereInputRecursive1']


class MWhereInputRecursive1(TypedDict, total=False):
    """M arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['MWhereInputRecursive2']
    OR: List['MWhereInputRecursive2']
    NOT: List['MWhereInputRecursive2']


class MWhereInputRecursive2(TypedDict, total=False):
    """M arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']


MKeys = Literal[
    'id',
    'n',
    'int',
    'optional_int',
    'float',
    'optional_float',
    'string',
    'optional_string',
    'enum',
    'optional_enum',
    'boolean',
    'optional_boolean',
]

MRelationalFieldKeys = Literal[
        'n',
    ]

# N types

class NOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the N create method"""
    id: Optional[int]
    m: Optional['MCreateManyNestedWithoutRelationsInput']
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class NCreateInput(NOptionalCreateInput):
    """Required arguments to the N create method"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the N create method, without relations"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class NCreateWithoutRelationsInput(NOptionalCreateWithoutRelationsInput):
    """Required arguments to the N create method, without relations"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


class NCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['NCreateWithoutRelationsInput']
    connect: Optional['NWhereUniqueInput']


class NCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['NCreateWithoutRelationsInput', List['NCreateWithoutRelationsInput']]]
    connect: Optional[Union['NWhereUniqueInput', List['NWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class NWhereUniqueInput(TypedDict, total=False):
    """Unique N arguments for searching"""
    id: int


class NUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    m: Optional['MUpdateManyWithoutRelationsInput']
    int: Optional[Union['NUpdateintInput', int]]
    optional_int: Optional[Union['NUpdateoptional_intInput', int]]
    float: Optional[Union['NUpdatefloatInput', float]]
    optional_float: Optional[Union['NUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['NUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['NUpdateoptional_booleanInput', bool]]


class NUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['NUpdateidInput', int]]
    m: Optional['MUpdateManyWithoutRelationsInput']
    int: Optional[Union['NUpdateintInput', int]]
    optional_int: Optional[Union['NUpdateoptional_intInput', int]]
    float: Optional[Union['NUpdatefloatInput', float]]
    optional_float: Optional[Union['NUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['NUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['NUpdateoptional_booleanInput', bool]]


class NUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class NUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class NUpdateoptional_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class NUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class NUpdateoptional_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class NUpdatebooleanInput(TypedDict, total=False):
    set: bool
class NUpdateoptional_booleanInput(TypedDict, total=False):
    set: bool


class NUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NCreateWithoutRelationsInput']
    connect: List['NWhereUniqueInput']
    set: List['NWhereUniqueInput']
    disconnect: List['NWhereUniqueInput']
    delete: List['NWhereUniqueInput']

    # TODO
    # update: List['NUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NScalarWhereInput']
    # upsert: List['NUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['NCreateOrConnectWithoutRelationsInput']


class NUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NCreateWithoutRelationsInput'
    connect: 'NWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NUpdateInput'
    # upsert: 'NUpsertWithoutRelationsInput'
    # connectOrCreate: 'NCreateOrConnectWithoutRelationsInput'


class NUpsertInput(TypedDict, total=False):
    create: 'NCreateInput'
    update: 'NUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class NOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    int: Optional['SortOrder']
    optional_int: Optional['SortOrder']
    float: Optional['SortOrder']
    optional_float: Optional['SortOrder']
    string: Optional['SortOrder']
    optional_string: Optional['SortOrder']
    enum: Optional['SortOrder']
    optional_enum: Optional['SortOrder']
    boolean: Optional['SortOrder']
    optional_boolean: Optional['SortOrder']


# recursive N types
# TODO: cleanup these types


class NInclude(TypedDict, total=False):
    """N relational arguments"""
    m: Union[bool, 'FindManyMArgsFromN']


    

class PostIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    author: Union[bool, 'UserArgsFromNRecursive1']


class PostIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    author: Union[bool, 'UserArgsFromNRecursive2']


class PostIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class PostArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyPostArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    posts: Union[bool, 'FindManyPostArgsFromNRecursive1']


class UserIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    posts: Union[bool, 'FindManyPostArgsFromNRecursive2']


class UserIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class UserArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyUserArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    n: Union[bool, 'FindManyNArgsFromNRecursive1']


class MIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    n: Union[bool, 'FindManyNArgsFromNRecursive2']


class MIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class MArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyMArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    m: Union[bool, 'FindManyMArgsFromNRecursive1']


class NIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    m: Union[bool, 'FindManyMArgsFromNRecursive2']


class NIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class NArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyNArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    many: Union[bool, 'FindManyManyRequiredArgsFromNRecursive1']


class OneOptionalIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    many: Union[bool, 'FindManyManyRequiredArgsFromNRecursive2']


class OneOptionalIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class OneOptionalArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyOneOptionalArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""
    one: Union[bool, 'OneOptionalArgsFromNRecursive1']


class ManyRequiredIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""
    one: Union[bool, 'OneOptionalArgsFromNRecursive2']


class ManyRequiredIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class ManyRequiredArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyManyRequiredArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""


class AIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""


class AIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class AArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'AIncludeFromARecursive1'


class AArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'AIncludeFromARecursive2'


class AArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyAArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""


class BIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""


class BIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class BArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyBArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""


class CIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""


class CIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class CArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyCArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""


class DIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""


class DIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class DArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyDArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromN(TypedDict, total=False):
    """Relational arguments for N"""


class EIncludeFromNRecursive1(TypedDict, total=False):
    """Relational arguments for N"""


class EIncludeFromNRecursive2(TypedDict, total=False):
    """Relational arguments for N"""

    

class EArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    include: 'EIncludeFromERecursive1'


class EArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    include: 'EIncludeFromERecursive2'


class EArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    
    

class FindManyEArgsFromN(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromNRecursive1(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromNRecursive2(TypedDict, total=False):
    """Arguments for N"""
    take: int
    skip: int
    order_by: Union['NOrderByInput', List['NOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyNArgs = FindManyNArgsFromN
FindFirstNArgs = FindManyNArgsFromN


# TODO: support relationships here
    

class NWhereInput(TypedDict, total=False):
    """N arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['NWhereInputRecursive1']
    OR: List['NWhereInputRecursive1']
    NOT: List['NWhereInputRecursive1']


class NWhereInputRecursive1(TypedDict, total=False):
    """N arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['NWhereInputRecursive2']
    OR: List['NWhereInputRecursive2']
    NOT: List['NWhereInputRecursive2']


class NWhereInputRecursive2(TypedDict, total=False):
    """N arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']


NKeys = Literal[
    'id',
    'm',
    'int',
    'optional_int',
    'float',
    'optional_float',
    'string',
    'optional_string',
    'enum',
    'optional_enum',
    'boolean',
    'optional_boolean',
]

NRelationalFieldKeys = Literal[
        'm',
    ]

# OneOptional types

class OneOptionalOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the OneOptional create method"""
    id: Optional[int]
    many: Optional['ManyRequiredCreateManyNestedWithoutRelationsInput']
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class OneOptionalCreateInput(OneOptionalOptionalCreateInput):
    """Required arguments to the OneOptional create method"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class OneOptionalOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the OneOptional create method, without relations"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class OneOptionalCreateWithoutRelationsInput(OneOptionalOptionalCreateWithoutRelationsInput):
    """Required arguments to the OneOptional create method, without relations"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


class OneOptionalCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['OneOptionalCreateWithoutRelationsInput']
    connect: Optional['OneOptionalWhereUniqueInput']


class OneOptionalCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['OneOptionalCreateWithoutRelationsInput', List['OneOptionalCreateWithoutRelationsInput']]]
    connect: Optional[Union['OneOptionalWhereUniqueInput', List['OneOptionalWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class OneOptionalWhereUniqueInput(TypedDict, total=False):
    """Unique OneOptional arguments for searching"""
    id: int


class OneOptionalUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    many: Optional['ManyRequiredUpdateManyWithoutRelationsInput']
    int: Optional[Union['OneOptionalUpdateintInput', int]]
    optional_int: Optional[Union['OneOptionalUpdateoptional_intInput', int]]
    float: Optional[Union['OneOptionalUpdatefloatInput', float]]
    optional_float: Optional[Union['OneOptionalUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['OneOptionalUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['OneOptionalUpdateoptional_booleanInput', bool]]


class OneOptionalUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['OneOptionalUpdateidInput', int]]
    many: Optional['ManyRequiredUpdateManyWithoutRelationsInput']
    int: Optional[Union['OneOptionalUpdateintInput', int]]
    optional_int: Optional[Union['OneOptionalUpdateoptional_intInput', int]]
    float: Optional[Union['OneOptionalUpdatefloatInput', float]]
    optional_float: Optional[Union['OneOptionalUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['OneOptionalUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['OneOptionalUpdateoptional_booleanInput', bool]]


class OneOptionalUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class OneOptionalUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class OneOptionalUpdateoptional_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class OneOptionalUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class OneOptionalUpdateoptional_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class OneOptionalUpdatebooleanInput(TypedDict, total=False):
    set: bool
class OneOptionalUpdateoptional_booleanInput(TypedDict, total=False):
    set: bool


class OneOptionalUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['OneOptionalCreateWithoutRelationsInput']
    connect: List['OneOptionalWhereUniqueInput']
    set: List['OneOptionalWhereUniqueInput']
    disconnect: List['OneOptionalWhereUniqueInput']
    delete: List['OneOptionalWhereUniqueInput']

    # TODO
    # update: List['OneOptionalUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['OneOptionalUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['OneOptionalScalarWhereInput']
    # upsert: List['OneOptionalUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['OneOptionalCreateOrConnectWithoutRelationsInput']


class OneOptionalUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'OneOptionalCreateWithoutRelationsInput'
    connect: 'OneOptionalWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'OneOptionalUpdateInput'
    # upsert: 'OneOptionalUpsertWithoutRelationsInput'
    # connectOrCreate: 'OneOptionalCreateOrConnectWithoutRelationsInput'


class OneOptionalUpsertInput(TypedDict, total=False):
    create: 'OneOptionalCreateInput'
    update: 'OneOptionalUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class OneOptionalOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    int: Optional['SortOrder']
    optional_int: Optional['SortOrder']
    float: Optional['SortOrder']
    optional_float: Optional['SortOrder']
    string: Optional['SortOrder']
    optional_string: Optional['SortOrder']
    enum: Optional['SortOrder']
    optional_enum: Optional['SortOrder']
    boolean: Optional['SortOrder']
    optional_boolean: Optional['SortOrder']


# recursive OneOptional types
# TODO: cleanup these types


class OneOptionalInclude(TypedDict, total=False):
    """OneOptional relational arguments"""
    many: Union[bool, 'FindManyManyRequiredArgsFromOneOptional']


    

class PostIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    author: Union[bool, 'UserArgsFromOneOptionalRecursive1']


class PostIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    author: Union[bool, 'UserArgsFromOneOptionalRecursive2']


class PostIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class PostArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyPostArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    posts: Union[bool, 'FindManyPostArgsFromOneOptionalRecursive1']


class UserIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    posts: Union[bool, 'FindManyPostArgsFromOneOptionalRecursive2']


class UserIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class UserArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyUserArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    n: Union[bool, 'FindManyNArgsFromOneOptionalRecursive1']


class MIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    n: Union[bool, 'FindManyNArgsFromOneOptionalRecursive2']


class MIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class MArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyMArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    m: Union[bool, 'FindManyMArgsFromOneOptionalRecursive1']


class NIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    m: Union[bool, 'FindManyMArgsFromOneOptionalRecursive2']


class NIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class NArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyNArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    many: Union[bool, 'FindManyManyRequiredArgsFromOneOptionalRecursive1']


class OneOptionalIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    many: Union[bool, 'FindManyManyRequiredArgsFromOneOptionalRecursive2']


class OneOptionalIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class OneOptionalArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyOneOptionalArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    one: Union[bool, 'OneOptionalArgsFromOneOptionalRecursive1']


class ManyRequiredIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""
    one: Union[bool, 'OneOptionalArgsFromOneOptionalRecursive2']


class ManyRequiredIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class ManyRequiredArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyManyRequiredArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class AIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class AIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class AArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'AIncludeFromARecursive1'


class AArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'AIncludeFromARecursive2'


class AArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyAArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class BIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class BIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class BArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyBArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class CIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class CIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class CArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyCArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class DIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class DIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class DArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyDArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromOneOptional(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class EIncludeFromOneOptionalRecursive1(TypedDict, total=False):
    """Relational arguments for OneOptional"""


class EIncludeFromOneOptionalRecursive2(TypedDict, total=False):
    """Relational arguments for OneOptional"""

    

class EArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'EIncludeFromERecursive1'


class EArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    include: 'EIncludeFromERecursive2'


class EArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    
    

class FindManyEArgsFromOneOptional(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromOneOptionalRecursive1(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromOneOptionalRecursive2(TypedDict, total=False):
    """Arguments for OneOptional"""
    take: int
    skip: int
    order_by: Union['OneOptionalOrderByInput', List['OneOptionalOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyOneOptionalArgs = FindManyOneOptionalArgsFromOneOptional
FindFirstOneOptionalArgs = FindManyOneOptionalArgsFromOneOptional


# TODO: support relationships here
    

class OneOptionalWhereInput(TypedDict, total=False):
    """OneOptional arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['OneOptionalWhereInputRecursive1']
    OR: List['OneOptionalWhereInputRecursive1']
    NOT: List['OneOptionalWhereInputRecursive1']


class OneOptionalWhereInputRecursive1(TypedDict, total=False):
    """OneOptional arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['OneOptionalWhereInputRecursive2']
    OR: List['OneOptionalWhereInputRecursive2']
    NOT: List['OneOptionalWhereInputRecursive2']


class OneOptionalWhereInputRecursive2(TypedDict, total=False):
    """OneOptional arguments for searching"""
    id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']


OneOptionalKeys = Literal[
    'id',
    'many',
    'int',
    'optional_int',
    'float',
    'optional_float',
    'string',
    'optional_string',
    'enum',
    'optional_enum',
    'boolean',
    'optional_boolean',
]

OneOptionalRelationalFieldKeys = Literal[
        'many',
    ]

# ManyRequired types

class ManyRequiredOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ManyRequired create method"""
    id: Optional[int]
    one: Optional['OneOptionalCreateNestedWithoutRelationsInput']
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class ManyRequiredCreateInput(ManyRequiredOptionalCreateInput):
    """Required arguments to the ManyRequired create method"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ManyRequiredOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ManyRequired create method, without relations"""
    id: Optional[int]
    optional_int: Optional[int]
    optional_float: Optional[float]
    optional_string: Optional[str]
    optional_enum: Optional['enums.ABeautifulEnum']
    optional_boolean: Optional[bool]


class ManyRequiredCreateWithoutRelationsInput(ManyRequiredOptionalCreateWithoutRelationsInput):
    """Required arguments to the ManyRequired create method, without relations"""
    int: int
    float: float
    string: str
    enum: 'enums.ABeautifulEnum'
    boolean: bool


class ManyRequiredCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['ManyRequiredCreateWithoutRelationsInput']
    connect: Optional['ManyRequiredWhereUniqueInput']


class ManyRequiredCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['ManyRequiredCreateWithoutRelationsInput', List['ManyRequiredCreateWithoutRelationsInput']]]
    connect: Optional[Union['ManyRequiredWhereUniqueInput', List['ManyRequiredWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class ManyRequiredWhereUniqueInput(TypedDict, total=False):
    """Unique ManyRequired arguments for searching"""
    id: int


class ManyRequiredUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    one: Optional['OneOptionalUpdateOneWithoutRelationsInput']
    int: Optional[Union['ManyRequiredUpdateintInput', int]]
    optional_int: Optional[Union['ManyRequiredUpdateoptional_intInput', int]]
    float: Optional[Union['ManyRequiredUpdatefloatInput', float]]
    optional_float: Optional[Union['ManyRequiredUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['ManyRequiredUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['ManyRequiredUpdateoptional_booleanInput', bool]]


class ManyRequiredUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[Union['ManyRequiredUpdateidInput', int]]
    one: Optional['OneOptionalUpdateOneWithoutRelationsInput']
    int: Optional[Union['ManyRequiredUpdateintInput', int]]
    optional_int: Optional[Union['ManyRequiredUpdateoptional_intInput', int]]
    float: Optional[Union['ManyRequiredUpdatefloatInput', float]]
    optional_float: Optional[Union['ManyRequiredUpdateoptional_floatInput', float]]
    string: Optional[str]
    optional_string: Optional[str]
    enum: Optional['enums.ABeautifulEnum']
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: Optional[Union['ManyRequiredUpdatebooleanInput', bool]]
    optional_boolean: Optional[Union['ManyRequiredUpdateoptional_booleanInput', bool]]


class ManyRequiredUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class ManyRequiredUpdateone_optional_idInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class ManyRequiredUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class ManyRequiredUpdateoptional_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class ManyRequiredUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class ManyRequiredUpdateoptional_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class ManyRequiredUpdatebooleanInput(TypedDict, total=False):
    set: bool
class ManyRequiredUpdateoptional_booleanInput(TypedDict, total=False):
    set: bool


class ManyRequiredUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ManyRequiredCreateWithoutRelationsInput']
    connect: List['ManyRequiredWhereUniqueInput']
    set: List['ManyRequiredWhereUniqueInput']
    disconnect: List['ManyRequiredWhereUniqueInput']
    delete: List['ManyRequiredWhereUniqueInput']

    # TODO
    # update: List['ManyRequiredUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ManyRequiredUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ManyRequiredScalarWhereInput']
    # upsert: List['ManyRequiredUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ManyRequiredCreateOrConnectWithoutRelationsInput']


class ManyRequiredUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ManyRequiredCreateWithoutRelationsInput'
    connect: 'ManyRequiredWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ManyRequiredUpdateInput'
    # upsert: 'ManyRequiredUpsertWithoutRelationsInput'
    # connectOrCreate: 'ManyRequiredCreateOrConnectWithoutRelationsInput'


class ManyRequiredUpsertInput(TypedDict, total=False):
    create: 'ManyRequiredCreateInput'
    update: 'ManyRequiredUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class ManyRequiredOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    one_optional_id: Optional['SortOrder']
    int: Optional['SortOrder']
    optional_int: Optional['SortOrder']
    float: Optional['SortOrder']
    optional_float: Optional['SortOrder']
    string: Optional['SortOrder']
    optional_string: Optional['SortOrder']
    enum: Optional['SortOrder']
    optional_enum: Optional['SortOrder']
    boolean: Optional['SortOrder']
    optional_boolean: Optional['SortOrder']


# recursive ManyRequired types
# TODO: cleanup these types


class ManyRequiredInclude(TypedDict, total=False):
    """ManyRequired relational arguments"""
    one: Union[bool, 'OneOptionalArgsFromManyRequired']


    

class PostIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    author: Union[bool, 'UserArgsFromManyRequiredRecursive1']


class PostIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    author: Union[bool, 'UserArgsFromManyRequiredRecursive2']


class PostIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class PostArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyPostArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    posts: Union[bool, 'FindManyPostArgsFromManyRequiredRecursive1']


class UserIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    posts: Union[bool, 'FindManyPostArgsFromManyRequiredRecursive2']


class UserIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class UserArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyUserArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    n: Union[bool, 'FindManyNArgsFromManyRequiredRecursive1']


class MIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    n: Union[bool, 'FindManyNArgsFromManyRequiredRecursive2']


class MIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class MArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyMArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    m: Union[bool, 'FindManyMArgsFromManyRequiredRecursive1']


class NIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    m: Union[bool, 'FindManyMArgsFromManyRequiredRecursive2']


class NIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class NArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyNArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    many: Union[bool, 'FindManyManyRequiredArgsFromManyRequiredRecursive1']


class OneOptionalIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    many: Union[bool, 'FindManyManyRequiredArgsFromManyRequiredRecursive2']


class OneOptionalIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class OneOptionalArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyOneOptionalArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    one: Union[bool, 'OneOptionalArgsFromManyRequiredRecursive1']


class ManyRequiredIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""
    one: Union[bool, 'OneOptionalArgsFromManyRequiredRecursive2']


class ManyRequiredIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class ManyRequiredArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyManyRequiredArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class AIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class AIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class AArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'AIncludeFromARecursive1'


class AArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'AIncludeFromARecursive2'


class AArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyAArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class BIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class BIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class BArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyBArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class CIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class CIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class CArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyCArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class DIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class DIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class DArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyDArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromManyRequired(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class EIncludeFromManyRequiredRecursive1(TypedDict, total=False):
    """Relational arguments for ManyRequired"""


class EIncludeFromManyRequiredRecursive2(TypedDict, total=False):
    """Relational arguments for ManyRequired"""

    

class EArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'EIncludeFromERecursive1'


class EArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    include: 'EIncludeFromERecursive2'


class EArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    
    

class FindManyEArgsFromManyRequired(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromManyRequiredRecursive1(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromManyRequiredRecursive2(TypedDict, total=False):
    """Arguments for ManyRequired"""
    take: int
    skip: int
    order_by: Union['ManyRequiredOrderByInput', List['ManyRequiredOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyManyRequiredArgs = FindManyManyRequiredArgsFromManyRequired
FindFirstManyRequiredArgs = FindManyManyRequiredArgsFromManyRequired


# TODO: support relationships here
    

class ManyRequiredWhereInput(TypedDict, total=False):
    """ManyRequired arguments for searching"""
    id: Union[int, 'types.IntFilter']
    one_optional_id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['ManyRequiredWhereInputRecursive1']
    OR: List['ManyRequiredWhereInputRecursive1']
    NOT: List['ManyRequiredWhereInputRecursive1']


class ManyRequiredWhereInputRecursive1(TypedDict, total=False):
    """ManyRequired arguments for searching"""
    id: Union[int, 'types.IntFilter']
    one_optional_id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']

    AND: List['ManyRequiredWhereInputRecursive2']
    OR: List['ManyRequiredWhereInputRecursive2']
    NOT: List['ManyRequiredWhereInputRecursive2']


class ManyRequiredWhereInputRecursive2(TypedDict, total=False):
    """ManyRequired arguments for searching"""
    id: Union[int, 'types.IntFilter']
    one_optional_id: Union[int, 'types.IntFilter']
    int: Union[int, 'types.IntFilter']
    optional_int: Union[int, 'types.IntFilter']
    float: Union[float, 'types.FloatFilter']
    optional_float: Union[float, 'types.FloatFilter']
    string: Union[str, 'types.StringFilter']
    optional_string: Union[str, 'types.StringFilter']
    enum: 'enums.ABeautifulEnum'
    optional_enum: 'enums.ABeautifulEnum'
    boolean: Union[bool, 'types.BooleanFilter']
    optional_boolean: Union[bool, 'types.BooleanFilter']


ManyRequiredKeys = Literal[
    'id',
    'one',
    'one_optional_id',
    'int',
    'optional_int',
    'float',
    'optional_float',
    'string',
    'optional_string',
    'enum',
    'optional_enum',
    'boolean',
    'optional_boolean',
]

ManyRequiredRelationalFieldKeys = Literal[
        'one',
    ]

# A types

class AOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the A create method"""
    id: Optional[str]
    name: Optional[str]
    inc_int: Optional[int]
    inc_sInt: Optional[int]


class ACreateInput(AOptionalCreateInput):
    """Required arguments to the A create method"""
    email: str
    int: int
    sInt: int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the A create method, without relations"""
    id: Optional[str]
    name: Optional[str]
    inc_int: Optional[int]
    inc_sInt: Optional[int]


class ACreateWithoutRelationsInput(AOptionalCreateWithoutRelationsInput):
    """Required arguments to the A create method, without relations"""
    email: str
    int: int
    sInt: int


class ACreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['ACreateWithoutRelationsInput']
    connect: Optional['AWhereUniqueInput']


class ACreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['ACreateWithoutRelationsInput', List['ACreateWithoutRelationsInput']]]
    connect: Optional[Union['AWhereUniqueInput', List['AWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class AWhereUniqueInput(TypedDict, total=False):
    """Unique A arguments for searching"""
    id: str
    email: str


class AUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    name: Optional[str]
    int: Optional[Union['AUpdateintInput', int]]
    sInt: Optional[Union['AUpdatesIntInput', int]]
    inc_int: Optional[Union['AUpdateinc_intInput', int]]
    inc_sInt: Optional[Union['AUpdateinc_sIntInput', int]]


class AUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[str]
    email: Optional[str]
    name: Optional[str]
    int: Optional[Union['AUpdateintInput', int]]
    sInt: Optional[Union['AUpdatesIntInput', int]]
    inc_int: Optional[Union['AUpdateinc_intInput', int]]
    inc_sInt: Optional[Union['AUpdateinc_sIntInput', int]]


class AUpdateintInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class AUpdatesIntInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class AUpdateinc_intInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int
class AUpdateinc_sIntInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int


class AUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ACreateWithoutRelationsInput']
    connect: List['AWhereUniqueInput']
    set: List['AWhereUniqueInput']
    disconnect: List['AWhereUniqueInput']
    delete: List['AWhereUniqueInput']

    # TODO
    # update: List['AUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AScalarWhereInput']
    # upsert: List['AUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ACreateOrConnectWithoutRelationsInput']


class AUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ACreateWithoutRelationsInput'
    connect: 'AWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AUpdateInput'
    # upsert: 'AUpsertWithoutRelationsInput'
    # connectOrCreate: 'ACreateOrConnectWithoutRelationsInput'


class AUpsertInput(TypedDict, total=False):
    create: 'ACreateInput'
    update: 'AUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class AOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    email: Optional['SortOrder']
    name: Optional['SortOrder']
    int: Optional['SortOrder']
    sInt: Optional['SortOrder']
    inc_int: Optional['SortOrder']
    inc_sInt: Optional['SortOrder']


# recursive A types
# TODO: cleanup these types


class AInclude(TypedDict, total=False):
    """A relational arguments"""


    

class PostIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    author: Union[bool, 'UserArgsFromARecursive1']


class PostIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    author: Union[bool, 'UserArgsFromARecursive2']


class PostIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class PostArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyPostArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    posts: Union[bool, 'FindManyPostArgsFromARecursive1']


class UserIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    posts: Union[bool, 'FindManyPostArgsFromARecursive2']


class UserIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class UserArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyUserArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    n: Union[bool, 'FindManyNArgsFromARecursive1']


class MIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    n: Union[bool, 'FindManyNArgsFromARecursive2']


class MIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class MArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyMArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    m: Union[bool, 'FindManyMArgsFromARecursive1']


class NIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    m: Union[bool, 'FindManyMArgsFromARecursive2']


class NIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class NArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyNArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    many: Union[bool, 'FindManyManyRequiredArgsFromARecursive1']


class OneOptionalIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    many: Union[bool, 'FindManyManyRequiredArgsFromARecursive2']


class OneOptionalIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class OneOptionalArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyOneOptionalArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""
    one: Union[bool, 'OneOptionalArgsFromARecursive1']


class ManyRequiredIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""
    one: Union[bool, 'OneOptionalArgsFromARecursive2']


class ManyRequiredIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class ManyRequiredArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyManyRequiredArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""


class AIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""


class AIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class AArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'AIncludeFromARecursive1'


class AArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'AIncludeFromARecursive2'


class AArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyAArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""


class BIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""


class BIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class BArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyBArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""


class CIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""


class CIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class CArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyCArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""


class DIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""


class DIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class DArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyDArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromA(TypedDict, total=False):
    """Relational arguments for A"""


class EIncludeFromARecursive1(TypedDict, total=False):
    """Relational arguments for A"""


class EIncludeFromARecursive2(TypedDict, total=False):
    """Relational arguments for A"""

    

class EArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    include: 'EIncludeFromERecursive1'


class EArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    include: 'EIncludeFromERecursive2'


class EArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    
    

class FindManyEArgsFromA(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromARecursive1(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromARecursive2(TypedDict, total=False):
    """Arguments for A"""
    take: int
    skip: int
    order_by: Union['AOrderByInput', List['AOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyAArgs = FindManyAArgsFromA
FindFirstAArgs = FindManyAArgsFromA


# TODO: support relationships here
    

class AWhereInput(TypedDict, total=False):
    """A arguments for searching"""
    id: Union[str, 'types.StringFilter']
    email: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    sInt: Union[int, 'types.IntFilter']
    inc_int: Union[int, 'types.IntFilter']
    inc_sInt: Union[int, 'types.IntFilter']

    AND: List['AWhereInputRecursive1']
    OR: List['AWhereInputRecursive1']
    NOT: List['AWhereInputRecursive1']


class AWhereInputRecursive1(TypedDict, total=False):
    """A arguments for searching"""
    id: Union[str, 'types.StringFilter']
    email: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    sInt: Union[int, 'types.IntFilter']
    inc_int: Union[int, 'types.IntFilter']
    inc_sInt: Union[int, 'types.IntFilter']

    AND: List['AWhereInputRecursive2']
    OR: List['AWhereInputRecursive2']
    NOT: List['AWhereInputRecursive2']


class AWhereInputRecursive2(TypedDict, total=False):
    """A arguments for searching"""
    id: Union[str, 'types.StringFilter']
    email: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    int: Union[int, 'types.IntFilter']
    sInt: Union[int, 'types.IntFilter']
    inc_int: Union[int, 'types.IntFilter']
    inc_sInt: Union[int, 'types.IntFilter']


AKeys = Literal[
    'id',
    'email',
    'name',
    'int',
    'sInt',
    'inc_int',
    'inc_sInt',
]

ARelationalFieldKeys = _NoneType

# B types

class BOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the B create method"""
    id: Optional[str]


class BCreateInput(BOptionalCreateInput):
    """Required arguments to the B create method"""
    float: float
    d_float: float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the B create method, without relations"""
    id: Optional[str]


class BCreateWithoutRelationsInput(BOptionalCreateWithoutRelationsInput):
    """Required arguments to the B create method, without relations"""
    float: float
    d_float: float


class BCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['BCreateWithoutRelationsInput']
    connect: Optional['BWhereUniqueInput']


class BCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['BCreateWithoutRelationsInput', List['BCreateWithoutRelationsInput']]]
    connect: Optional[Union['BWhereUniqueInput', List['BWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class BWhereUniqueInput(TypedDict, total=False):
    """Unique B arguments for searching"""
    id: str


class BUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    float: Optional[Union['BUpdatefloatInput', float]]
    d_float: Optional[Union['BUpdated_floatInput', float]]


class BUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[str]
    float: Optional[Union['BUpdatefloatInput', float]]
    d_float: Optional[Union['BUpdated_floatInput', float]]


class BUpdatefloatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float
class BUpdated_floatInput(TypedDict, total=False):
    set: float
    increment: float
    decrement: float
    multiply: float
    divide: float


class BUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BCreateWithoutRelationsInput']
    connect: List['BWhereUniqueInput']
    set: List['BWhereUniqueInput']
    disconnect: List['BWhereUniqueInput']
    delete: List['BWhereUniqueInput']

    # TODO
    # update: List['BUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BScalarWhereInput']
    # upsert: List['BUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['BCreateOrConnectWithoutRelationsInput']


class BUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BCreateWithoutRelationsInput'
    connect: 'BWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BUpdateInput'
    # upsert: 'BUpsertWithoutRelationsInput'
    # connectOrCreate: 'BCreateOrConnectWithoutRelationsInput'


class BUpsertInput(TypedDict, total=False):
    create: 'BCreateInput'
    update: 'BUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class BOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    float: Optional['SortOrder']
    d_float: Optional['SortOrder']


# recursive B types
# TODO: cleanup these types


class BInclude(TypedDict, total=False):
    """B relational arguments"""


    

class PostIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    author: Union[bool, 'UserArgsFromBRecursive1']


class PostIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    author: Union[bool, 'UserArgsFromBRecursive2']


class PostIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class PostArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyPostArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    posts: Union[bool, 'FindManyPostArgsFromBRecursive1']


class UserIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    posts: Union[bool, 'FindManyPostArgsFromBRecursive2']


class UserIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class UserArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyUserArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    n: Union[bool, 'FindManyNArgsFromBRecursive1']


class MIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    n: Union[bool, 'FindManyNArgsFromBRecursive2']


class MIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class MArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyMArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    m: Union[bool, 'FindManyMArgsFromBRecursive1']


class NIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    m: Union[bool, 'FindManyMArgsFromBRecursive2']


class NIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class NArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyNArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    many: Union[bool, 'FindManyManyRequiredArgsFromBRecursive1']


class OneOptionalIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    many: Union[bool, 'FindManyManyRequiredArgsFromBRecursive2']


class OneOptionalIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class OneOptionalArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyOneOptionalArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""
    one: Union[bool, 'OneOptionalArgsFromBRecursive1']


class ManyRequiredIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""
    one: Union[bool, 'OneOptionalArgsFromBRecursive2']


class ManyRequiredIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class ManyRequiredArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyManyRequiredArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""


class AIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""


class AIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class AArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'AIncludeFromARecursive1'


class AArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'AIncludeFromARecursive2'


class AArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyAArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""


class BIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""


class BIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class BArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyBArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""


class CIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""


class CIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class CArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyCArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""


class DIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""


class DIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class DArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyDArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromB(TypedDict, total=False):
    """Relational arguments for B"""


class EIncludeFromBRecursive1(TypedDict, total=False):
    """Relational arguments for B"""


class EIncludeFromBRecursive2(TypedDict, total=False):
    """Relational arguments for B"""

    

class EArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    include: 'EIncludeFromERecursive1'


class EArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    include: 'EIncludeFromERecursive2'


class EArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    
    

class FindManyEArgsFromB(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromBRecursive1(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromBRecursive2(TypedDict, total=False):
    """Arguments for B"""
    take: int
    skip: int
    order_by: Union['BOrderByInput', List['BOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyBArgs = FindManyBArgsFromB
FindFirstBArgs = FindManyBArgsFromB


# TODO: support relationships here
    

class BWhereInput(TypedDict, total=False):
    """B arguments for searching"""
    id: Union[str, 'types.StringFilter']
    float: Union[float, 'types.FloatFilter']
    d_float: Union[float, 'types.FloatFilter']

    AND: List['BWhereInputRecursive1']
    OR: List['BWhereInputRecursive1']
    NOT: List['BWhereInputRecursive1']


class BWhereInputRecursive1(TypedDict, total=False):
    """B arguments for searching"""
    id: Union[str, 'types.StringFilter']
    float: Union[float, 'types.FloatFilter']
    d_float: Union[float, 'types.FloatFilter']

    AND: List['BWhereInputRecursive2']
    OR: List['BWhereInputRecursive2']
    NOT: List['BWhereInputRecursive2']


class BWhereInputRecursive2(TypedDict, total=False):
    """B arguments for searching"""
    id: Union[str, 'types.StringFilter']
    float: Union[float, 'types.FloatFilter']
    d_float: Union[float, 'types.FloatFilter']


BKeys = Literal[
    'id',
    'float',
    'd_float',
]

BRelationalFieldKeys = _NoneType

# C types

class COptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the C create method"""
    id: Optional[str]


class CCreateInput(COptionalCreateInput):
    """Required arguments to the C create method"""
    char: str
    v_char: str
    text: str
    bit: str
    v_bit: str
    uuid: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class COptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the C create method, without relations"""
    id: Optional[str]


class CCreateWithoutRelationsInput(COptionalCreateWithoutRelationsInput):
    """Required arguments to the C create method, without relations"""
    char: str
    v_char: str
    text: str
    bit: str
    v_bit: str
    uuid: str


class CCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['CCreateWithoutRelationsInput']
    connect: Optional['CWhereUniqueInput']


class CCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['CCreateWithoutRelationsInput', List['CCreateWithoutRelationsInput']]]
    connect: Optional[Union['CWhereUniqueInput', List['CWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class CWhereUniqueInput(TypedDict, total=False):
    """Unique C arguments for searching"""
    id: str


class CUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    char: Optional[str]
    v_char: Optional[str]
    text: Optional[str]
    bit: Optional[str]
    v_bit: Optional[str]
    uuid: Optional[str]


class CUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[str]
    char: Optional[str]
    v_char: Optional[str]
    text: Optional[str]
    bit: Optional[str]
    v_bit: Optional[str]
    uuid: Optional[str]




class CUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CCreateWithoutRelationsInput']
    connect: List['CWhereUniqueInput']
    set: List['CWhereUniqueInput']
    disconnect: List['CWhereUniqueInput']
    delete: List['CWhereUniqueInput']

    # TODO
    # update: List['CUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CScalarWhereInput']
    # upsert: List['CUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CCreateOrConnectWithoutRelationsInput']


class CUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CCreateWithoutRelationsInput'
    connect: 'CWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CUpdateInput'
    # upsert: 'CUpsertWithoutRelationsInput'
    # connectOrCreate: 'CCreateOrConnectWithoutRelationsInput'


class CUpsertInput(TypedDict, total=False):
    create: 'CCreateInput'
    update: 'CUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class COrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    char: Optional['SortOrder']
    v_char: Optional['SortOrder']
    text: Optional['SortOrder']
    bit: Optional['SortOrder']
    v_bit: Optional['SortOrder']
    uuid: Optional['SortOrder']


# recursive C types
# TODO: cleanup these types


class CInclude(TypedDict, total=False):
    """C relational arguments"""


    

class PostIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    author: Union[bool, 'UserArgsFromCRecursive1']


class PostIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    author: Union[bool, 'UserArgsFromCRecursive2']


class PostIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class PostArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyPostArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    posts: Union[bool, 'FindManyPostArgsFromCRecursive1']


class UserIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    posts: Union[bool, 'FindManyPostArgsFromCRecursive2']


class UserIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class UserArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyUserArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    n: Union[bool, 'FindManyNArgsFromCRecursive1']


class MIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    n: Union[bool, 'FindManyNArgsFromCRecursive2']


class MIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class MArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyMArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    m: Union[bool, 'FindManyMArgsFromCRecursive1']


class NIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    m: Union[bool, 'FindManyMArgsFromCRecursive2']


class NIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class NArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyNArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    many: Union[bool, 'FindManyManyRequiredArgsFromCRecursive1']


class OneOptionalIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    many: Union[bool, 'FindManyManyRequiredArgsFromCRecursive2']


class OneOptionalIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class OneOptionalArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyOneOptionalArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""
    one: Union[bool, 'OneOptionalArgsFromCRecursive1']


class ManyRequiredIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""
    one: Union[bool, 'OneOptionalArgsFromCRecursive2']


class ManyRequiredIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class ManyRequiredArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyManyRequiredArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""


class AIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""


class AIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class AArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'AIncludeFromARecursive1'


class AArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'AIncludeFromARecursive2'


class AArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyAArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""


class BIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""


class BIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class BArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyBArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""


class CIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""


class CIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class CArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyCArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""


class DIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""


class DIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class DArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyDArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromC(TypedDict, total=False):
    """Relational arguments for C"""


class EIncludeFromCRecursive1(TypedDict, total=False):
    """Relational arguments for C"""


class EIncludeFromCRecursive2(TypedDict, total=False):
    """Relational arguments for C"""

    

class EArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    include: 'EIncludeFromERecursive1'


class EArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    include: 'EIncludeFromERecursive2'


class EArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    
    

class FindManyEArgsFromC(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromCRecursive1(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromCRecursive2(TypedDict, total=False):
    """Arguments for C"""
    take: int
    skip: int
    order_by: Union['COrderByInput', List['COrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyCArgs = FindManyCArgsFromC
FindFirstCArgs = FindManyCArgsFromC


# TODO: support relationships here
    

class CWhereInput(TypedDict, total=False):
    """C arguments for searching"""
    id: Union[str, 'types.StringFilter']
    char: Union[str, 'types.StringFilter']
    v_char: Union[str, 'types.StringFilter']
    text: Union[str, 'types.StringFilter']
    bit: Union[str, 'types.StringFilter']
    v_bit: Union[str, 'types.StringFilter']
    uuid: Union[str, 'types.StringFilter']

    AND: List['CWhereInputRecursive1']
    OR: List['CWhereInputRecursive1']
    NOT: List['CWhereInputRecursive1']


class CWhereInputRecursive1(TypedDict, total=False):
    """C arguments for searching"""
    id: Union[str, 'types.StringFilter']
    char: Union[str, 'types.StringFilter']
    v_char: Union[str, 'types.StringFilter']
    text: Union[str, 'types.StringFilter']
    bit: Union[str, 'types.StringFilter']
    v_bit: Union[str, 'types.StringFilter']
    uuid: Union[str, 'types.StringFilter']

    AND: List['CWhereInputRecursive2']
    OR: List['CWhereInputRecursive2']
    NOT: List['CWhereInputRecursive2']


class CWhereInputRecursive2(TypedDict, total=False):
    """C arguments for searching"""
    id: Union[str, 'types.StringFilter']
    char: Union[str, 'types.StringFilter']
    v_char: Union[str, 'types.StringFilter']
    text: Union[str, 'types.StringFilter']
    bit: Union[str, 'types.StringFilter']
    v_bit: Union[str, 'types.StringFilter']
    uuid: Union[str, 'types.StringFilter']


CKeys = Literal[
    'id',
    'char',
    'v_char',
    'text',
    'bit',
    'v_bit',
    'uuid',
]

CRelationalFieldKeys = _NoneType

# D types

class DOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the D create method"""
    id: Optional[str]


class DCreateInput(DOptionalCreateInput):
    """Required arguments to the D create method"""
    bool: bool
    xml: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the D create method, without relations"""
    id: Optional[str]


class DCreateWithoutRelationsInput(DOptionalCreateWithoutRelationsInput):
    """Required arguments to the D create method, without relations"""
    bool: bool
    xml: str


class DCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['DCreateWithoutRelationsInput']
    connect: Optional['DWhereUniqueInput']


class DCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['DCreateWithoutRelationsInput', List['DCreateWithoutRelationsInput']]]
    connect: Optional[Union['DWhereUniqueInput', List['DWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class DWhereUniqueInput(TypedDict, total=False):
    """Unique D arguments for searching"""
    id: str


class DUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    bool: Optional[Union['DUpdateboolInput', bool]]
    xml: Optional[str]


class DUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[str]
    bool: Optional[Union['DUpdateboolInput', bool]]
    xml: Optional[str]


class DUpdateboolInput(TypedDict, total=False):
    set: bool


class DUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DCreateWithoutRelationsInput']
    connect: List['DWhereUniqueInput']
    set: List['DWhereUniqueInput']
    disconnect: List['DWhereUniqueInput']
    delete: List['DWhereUniqueInput']

    # TODO
    # update: List['DUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DScalarWhereInput']
    # upsert: List['DUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DCreateOrConnectWithoutRelationsInput']


class DUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DCreateWithoutRelationsInput'
    connect: 'DWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DUpdateInput'
    # upsert: 'DUpsertWithoutRelationsInput'
    # connectOrCreate: 'DCreateOrConnectWithoutRelationsInput'


class DUpsertInput(TypedDict, total=False):
    create: 'DCreateInput'
    update: 'DUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class DOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    bool: Optional['SortOrder']
    xml: Optional['SortOrder']


# recursive D types
# TODO: cleanup these types


class DInclude(TypedDict, total=False):
    """D relational arguments"""


    

class PostIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    author: Union[bool, 'UserArgsFromDRecursive1']


class PostIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    author: Union[bool, 'UserArgsFromDRecursive2']


class PostIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class PostArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyPostArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    posts: Union[bool, 'FindManyPostArgsFromDRecursive1']


class UserIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    posts: Union[bool, 'FindManyPostArgsFromDRecursive2']


class UserIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class UserArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyUserArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    n: Union[bool, 'FindManyNArgsFromDRecursive1']


class MIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    n: Union[bool, 'FindManyNArgsFromDRecursive2']


class MIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class MArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyMArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    m: Union[bool, 'FindManyMArgsFromDRecursive1']


class NIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    m: Union[bool, 'FindManyMArgsFromDRecursive2']


class NIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class NArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyNArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    many: Union[bool, 'FindManyManyRequiredArgsFromDRecursive1']


class OneOptionalIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    many: Union[bool, 'FindManyManyRequiredArgsFromDRecursive2']


class OneOptionalIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class OneOptionalArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyOneOptionalArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""
    one: Union[bool, 'OneOptionalArgsFromDRecursive1']


class ManyRequiredIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""
    one: Union[bool, 'OneOptionalArgsFromDRecursive2']


class ManyRequiredIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class ManyRequiredArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyManyRequiredArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""


class AIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""


class AIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class AArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'AIncludeFromARecursive1'


class AArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'AIncludeFromARecursive2'


class AArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyAArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""


class BIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""


class BIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class BArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyBArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""


class CIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""


class CIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class CArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyCArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""


class DIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""


class DIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class DArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyDArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromD(TypedDict, total=False):
    """Relational arguments for D"""


class EIncludeFromDRecursive1(TypedDict, total=False):
    """Relational arguments for D"""


class EIncludeFromDRecursive2(TypedDict, total=False):
    """Relational arguments for D"""

    

class EArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    include: 'EIncludeFromERecursive1'


class EArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    include: 'EIncludeFromERecursive2'


class EArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    
    

class FindManyEArgsFromD(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromDRecursive1(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromDRecursive2(TypedDict, total=False):
    """Arguments for D"""
    take: int
    skip: int
    order_by: Union['DOrderByInput', List['DOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyDArgs = FindManyDArgsFromD
FindFirstDArgs = FindManyDArgsFromD


# TODO: support relationships here
    

class DWhereInput(TypedDict, total=False):
    """D arguments for searching"""
    id: Union[str, 'types.StringFilter']
    bool: Union[bool, 'types.BooleanFilter']
    xml: Union[str, 'types.StringFilter']

    AND: List['DWhereInputRecursive1']
    OR: List['DWhereInputRecursive1']
    NOT: List['DWhereInputRecursive1']


class DWhereInputRecursive1(TypedDict, total=False):
    """D arguments for searching"""
    id: Union[str, 'types.StringFilter']
    bool: Union[bool, 'types.BooleanFilter']
    xml: Union[str, 'types.StringFilter']

    AND: List['DWhereInputRecursive2']
    OR: List['DWhereInputRecursive2']
    NOT: List['DWhereInputRecursive2']


class DWhereInputRecursive2(TypedDict, total=False):
    """D arguments for searching"""
    id: Union[str, 'types.StringFilter']
    bool: Union[bool, 'types.BooleanFilter']
    xml: Union[str, 'types.StringFilter']


DKeys = Literal[
    'id',
    'bool',
    'xml',
]

DRelationalFieldKeys = _NoneType

# E types

class EOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the E create method"""
    id: Optional[str]


class ECreateInput(EOptionalCreateInput):
    """Required arguments to the E create method"""
    date: datetime.datetime
    time: datetime.datetime
    ts: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the E create method, without relations"""
    id: Optional[str]


class ECreateWithoutRelationsInput(EOptionalCreateWithoutRelationsInput):
    """Required arguments to the E create method, without relations"""
    date: datetime.datetime
    time: datetime.datetime
    ts: datetime.datetime


class ECreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional['ECreateWithoutRelationsInput']
    connect: Optional['EWhereUniqueInput']


class ECreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Optional[Union['ECreateWithoutRelationsInput', List['ECreateWithoutRelationsInput']]]
    connect: Optional[Union['EWhereUniqueInput', List['EWhereUniqueInput']]]


# TODO: what if a relational field is unique?
class EWhereUniqueInput(TypedDict, total=False):
    """Unique E arguments for searching"""
    id: str


class EUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    date: Optional[datetime.datetime]
    time: Optional[datetime.datetime]
    ts: Optional[datetime.datetime]


class EUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Optional[str]
    date: Optional[datetime.datetime]
    time: Optional[datetime.datetime]
    ts: Optional[datetime.datetime]




class EUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ECreateWithoutRelationsInput']
    connect: List['EWhereUniqueInput']
    set: List['EWhereUniqueInput']
    disconnect: List['EWhereUniqueInput']
    delete: List['EWhereUniqueInput']

    # TODO
    # update: List['EUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EScalarWhereInput']
    # upsert: List['EUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ECreateOrConnectWithoutRelationsInput']


class EUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ECreateWithoutRelationsInput'
    connect: 'EWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EUpdateInput'
    # upsert: 'EUpsertWithoutRelationsInput'
    # connectOrCreate: 'ECreateOrConnectWithoutRelationsInput'


class EUpsertInput(TypedDict, total=False):
    create: 'ECreateInput'
    update: 'EUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class EOrderByInput(TypedDict, total=False):
    id: Optional['SortOrder']
    date: Optional['SortOrder']
    time: Optional['SortOrder']
    ts: Optional['SortOrder']


# recursive E types
# TODO: cleanup these types


class EInclude(TypedDict, total=False):
    """E relational arguments"""


    

class PostIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    author: Union[bool, 'UserArgsFromERecursive1']


class PostIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    author: Union[bool, 'UserArgsFromERecursive2']


class PostIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class PostArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyPostArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    posts: Union[bool, 'FindManyPostArgsFromERecursive1']


class UserIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    posts: Union[bool, 'FindManyPostArgsFromERecursive2']


class UserIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class UserArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyUserArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class MIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    n: Union[bool, 'FindManyNArgsFromERecursive1']


class MIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    n: Union[bool, 'FindManyNArgsFromERecursive2']


class MIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class MArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'MIncludeFromMRecursive1'


class MArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'MIncludeFromMRecursive2'


class MArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyMArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive1'


class FindManyMArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    include: 'MIncludeFromMRecursive2'


class FindManyMArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'MWhereInput'
    cursor: 'MWhereUniqueInput'
    
    

class NIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    m: Union[bool, 'FindManyMArgsFromERecursive1']


class NIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    m: Union[bool, 'FindManyMArgsFromERecursive2']


class NIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class NArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'NIncludeFromNRecursive1'


class NArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'NIncludeFromNRecursive2'


class NArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyNArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive1'


class FindManyNArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    include: 'NIncludeFromNRecursive2'


class FindManyNArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'NWhereInput'
    cursor: 'NWhereUniqueInput'
    
    

class OneOptionalIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    many: Union[bool, 'FindManyManyRequiredArgsFromERecursive1']


class OneOptionalIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    many: Union[bool, 'FindManyManyRequiredArgsFromERecursive2']


class OneOptionalIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class OneOptionalArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class OneOptionalArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class OneOptionalArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyOneOptionalArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive1'


class FindManyOneOptionalArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    include: 'OneOptionalIncludeFromOneOptionalRecursive2'


class FindManyOneOptionalArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'OneOptionalWhereInput'
    cursor: 'OneOptionalWhereUniqueInput'
    
    

class ManyRequiredIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""
    one: Union[bool, 'OneOptionalArgsFromERecursive1']


class ManyRequiredIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""
    one: Union[bool, 'OneOptionalArgsFromERecursive2']


class ManyRequiredIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class ManyRequiredArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class ManyRequiredArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class ManyRequiredArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyManyRequiredArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive1'


class FindManyManyRequiredArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    include: 'ManyRequiredIncludeFromManyRequiredRecursive2'


class FindManyManyRequiredArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'ManyRequiredWhereInput'
    cursor: 'ManyRequiredWhereUniqueInput'
    
    

class AIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""


class AIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""


class AIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class AArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'AIncludeFromARecursive1'


class AArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'AIncludeFromARecursive2'


class AArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyAArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive1'


class FindManyAArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    include: 'AIncludeFromARecursive2'


class FindManyAArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'AWhereInput'
    cursor: 'AWhereUniqueInput'
    
    

class BIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""


class BIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""


class BIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class BArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'BIncludeFromBRecursive1'


class BArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'BIncludeFromBRecursive2'


class BArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyBArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive1'


class FindManyBArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    include: 'BIncludeFromBRecursive2'


class FindManyBArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'BWhereInput'
    cursor: 'BWhereUniqueInput'
    
    

class CIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""


class CIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""


class CIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class CArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'CIncludeFromCRecursive1'


class CArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'CIncludeFromCRecursive2'


class CArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyCArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive1'


class FindManyCArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    include: 'CIncludeFromCRecursive2'


class FindManyCArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'CWhereInput'
    cursor: 'CWhereUniqueInput'
    
    

class DIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""


class DIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""


class DIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class DArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'DIncludeFromDRecursive1'


class DArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'DIncludeFromDRecursive2'


class DArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyDArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive1'


class FindManyDArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    include: 'DIncludeFromDRecursive2'


class FindManyDArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'DWhereInput'
    cursor: 'DWhereUniqueInput'
    
    

class EIncludeFromE(TypedDict, total=False):
    """Relational arguments for E"""


class EIncludeFromERecursive1(TypedDict, total=False):
    """Relational arguments for E"""


class EIncludeFromERecursive2(TypedDict, total=False):
    """Relational arguments for E"""

    

class EArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    include: 'EIncludeFromERecursive1'


class EArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    include: 'EIncludeFromERecursive2'


class EArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    
    

class FindManyEArgsFromE(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive1'


class FindManyEArgsFromERecursive1(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    include: 'EIncludeFromERecursive2'


class FindManyEArgsFromERecursive2(TypedDict, total=False):
    """Arguments for E"""
    take: int
    skip: int
    order_by: Union['EOrderByInput', List['EOrderByInput']]
    where: 'EWhereInput'
    cursor: 'EWhereUniqueInput'
    


FindManyEArgs = FindManyEArgsFromE
FindFirstEArgs = FindManyEArgsFromE


# TODO: support relationships here
    

class EWhereInput(TypedDict, total=False):
    """E arguments for searching"""
    id: Union[str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    ts: Union[datetime.datetime, 'types.DateTimeFilter']

    AND: List['EWhereInputRecursive1']
    OR: List['EWhereInputRecursive1']
    NOT: List['EWhereInputRecursive1']


class EWhereInputRecursive1(TypedDict, total=False):
    """E arguments for searching"""
    id: Union[str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    ts: Union[datetime.datetime, 'types.DateTimeFilter']

    AND: List['EWhereInputRecursive2']
    OR: List['EWhereInputRecursive2']
    NOT: List['EWhereInputRecursive2']


class EWhereInputRecursive2(TypedDict, total=False):
    """E arguments for searching"""
    id: Union[str, 'types.StringFilter']
    date: Union[datetime.datetime, 'types.DateTimeFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    ts: Union[datetime.datetime, 'types.DateTimeFilter']


EKeys = Literal[
    'id',
    'date',
    'time',
    'ts',
]

ERelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models