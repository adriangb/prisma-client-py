# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 8):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template client.py.jinja --
from types import TracebackType
from collections import defaultdict
from pydantic import BaseModel, validate_arguments

from . import types, models, errors
from ._types import BaseModelT
from .engine import QueryEngine
from .builder import QueryBuilder


__all__ = (
    'Client',
    'load_env',
)

SCHEMA = '''
// NOTE: modified from https://github.com/prisma/prisma/blob/master/src/packages/client/src/__tests__/integration/happy/exhaustive-schema/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator db {
  provider             = "python3 -m prisma"
  recursive_type_depth = 3
  http                 = "aiohttp"
  output               = "../../../.tests_cache/generation/exhaustive/__prisma_async_output__/prisma"
}

model Post {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  title      String
  content    String?
  published  Boolean  @default(false)
  author     User     @relation(fields: [author_id], references: [id])
  author_id  Int
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?

  // TODO
  // json_            Json
  // optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
  posts            Post[]
  string_list      String[]
}

model M {
  id               Int             @id @default(autoincrement())
  n                N[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?

  // TODO
  // json_            Json
  // optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model N {
  id               Int             @id @default(autoincrement())
  m                M[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?

  // TODO
  // json_            Json
  // optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model OneOptional {
  id               Int             @id @default(autoincrement())
  many             ManyRequired[]
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?

  // TODO
  // json_            Json
  // optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

model ManyRequired {
  id  Int          @id @default(autoincrement())
  one OneOptional? @relation(fields: [one_optional_id], references: [id])

  one_optional_id  Int?
  int              Int
  optional_int     Int?
  float            Float
  optional_float   Float?
  string           String
  optional_string  String?

  // TODO
  // json_            Json
  // optional_json    Json?
  enum             ABeautifulEnum
  optional_enum    ABeautifulEnum?
  boolean          Boolean
  optional_boolean Boolean?
}

enum ABeautifulEnum {
  A
  B
  C
}

model A {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  int      Int     @db.Integer
  sInt     Int     @db.SmallInt
  inc_int  Int     @default(autoincrement()) @db.Integer
  inc_sInt Int     @default(autoincrement()) @db.SmallInt

  // TODO
  // bInt     BigInt @db.BigInt
  // inc_bInt BigInt @default(autoincrement()) @db.BigInt
}

model B {
  id      String @id @default(cuid())
  float   Float  @db.Real
  d_float Float  @db.DoublePrecision

  // TODO
  // decFloat Decimal @db.Decimal(2, 1)
  // numFloat Decimal @db.Decimal(10, 6)
}

model C {
  id     String @id @default(cuid())
  char   String @db.Char(10)
  v_char String @db.VarChar(11)
  text   String @db.Text
  bit    String @db.Bit(4)
  v_bit  String @db.VarBit(5)
  uuid   String @db.Uuid
}

model D {
  id    String  @id @default(cuid())
  bool  Boolean @db.Boolean
  xml   String  @db.Xml

  // TODO
  // json_ Json    @db.Json
  // jsonb Json    @db.JsonB
  // byteA Bytes   @db.ByteA
}

model E {
  id   String   @id @default(cuid())
  date DateTime @db.Date
  time DateTime @db.Time(3)
  ts   DateTime @db.Timestamp(3)
}

'''


def load_env(*, override: bool = True, **kwargs: Any) -> None:
    """Load environemntal variables from dotenv files

    Loads from the following files relative to the current
    working directory:

    - .env
    - prisma/.env
    """
    from dotenv import load_dotenv

    load_dotenv('.env', override=override, **kwargs)
    load_dotenv('prisma/.env', override=override, **kwargs)


class Client:
    post: 'PostActions'
    user: 'UserActions'
    m: 'MActions'
    n: 'NActions'
    oneoptional: 'OneOptionalActions'
    manyrequired: 'ManyRequiredActions'
    a: 'AActions'
    b: 'BActions'
    c: 'CActions'
    d: 'DActions'
    e: 'EActions'

    def __init__(self, *, use_dotenv: bool = True) -> None:
        self.post = PostActions(self)
        self.user = UserActions(self)
        self.m = MActions(self)
        self.n = NActions(self)
        self.oneoptional = OneOptionalActions(self)
        self.manyrequired = ManyRequiredActions(self)
        self.a = AActions(self)
        self.b = BActions(self)
        self.c = CActions(self)
        self.d = DActions(self)
        self.e = EActions(self)
        self.__engine: Optional[QueryEngine] = None
        self._active_provider = 'postgresql'

        if use_dotenv:
            load_env()

    def __del__(self) -> None:
        if self.__engine is not None:
            self.__engine.stop()
            self.__engine = None

    def is_connected(self) -> bool:
        """Returns True if the client is connected to the query engine, False otherwise."""
        return self.__engine is not None

    async def connect(self, timeout: int = 10) -> None:
        """Connect to the Prisma query engine.

        It is required to call this before accessing data.
        """
        if self.__engine is None:
            self.__engine = QueryEngine(dml=SCHEMA)

        await self.__engine.connect(timeout=timeout)

    async def disconnect(self) -> None:
        """Disconnect the Prisma query engine."""
        if self.__engine is not None:
            self.__engine.disconnect()
            await self.__engine.close_session()
            self.__engine = None

    async def execute_raw(self, query: str, *args: Any) -> int:
        resp = await self._execute(
            operation='mutation',
            method='executeRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(self, query: str, *args: Any) -> Any:
        ...

    @overload
    async def query_first(self, query: str, *args: Any, model: Type[BaseModelT]) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[Optional[BaseModelT], Any]:
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(self, query: str, *args: Any) -> Any:
        ...

    @overload
    async def query_raw(self, query: str, *args: Any, model: Type[BaseModelT]) -> List[BaseModelT]:
        ...

    async def query_raw(
        self, query: str, *args: Any, model: Optional[Type[BaseModelT]] = None
    ) -> Union[List[BaseModelT], Any]:
        resp = await self._execute(
            operation='mutation',
            method='queryRaw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )
        result = resp['data']['result']
        if model is not None:
            return [model.parse_obj(r) for r in result]
        return result

    def batch_(self) -> 'Batch':
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    # TODO: don't return Any
    async def _execute(
        self,
        method: str,
        operation: str,
        arguments: Dict[str, Any],
        model: Optional[str] = None,
        root_selection: Optional[List[str]] = None
    ) -> Any:
        builder = QueryBuilder(
            operation=operation,
            method=method,
            model=model,
            arguments=arguments,
            root_selection=root_selection,
        )
        return await self._engine.request('POST', '/', data=builder.build())

    @property
    def _engine(self) -> QueryEngine:
        engine = self.__engine
        if engine is None:
            raise errors.ClientNotConnectedError()
        return engine


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    post: 'PostBatchActions'
    user: 'UserBatchActions'
    m: 'MBatchActions'
    n: 'NBatchActions'
    oneoptional: 'OneOptionalBatchActions'
    manyrequired: 'ManyRequiredBatchActions'
    a: 'ABatchActions'
    b: 'BBatchActions'
    c: 'CBatchActions'
    d: 'DBatchActions'
    e: 'EBatchActions'

    def __init__(self, client: Client) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.post = PostBatchActions(self)
        self.user = UserBatchActions(self)
        self.m = MBatchActions(self)
        self.n = NBatchActions(self)
        self.oneoptional = OneOptionalBatchActions(self)
        self.manyrequired = ManyRequiredBatchActions(self)
        self.a = ABatchActions(self)
        self.b = BBatchActions(self)
        self.c = CBatchActions(self)
        self.d = DBatchActions(self)
        self.e = EBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(**kwargs)
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        from .builder import dumps

        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.request('POST', '/', data=dumps(payload))

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


class PostActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> models.Post:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='Post',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.Post.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='Post',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[models.Post]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='Post',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.Post.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[models.Post]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='Post',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.Post.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
    ) -> List[models.Post]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='Post',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.Post.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
    ) -> Optional[models.Post]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='Post',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.Post.parse_obj(result)

    async def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[models.Post]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='Post',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.Post.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> models.Post:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.Post.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='Post',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='Post',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='Post',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class PostBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='Post',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='Post',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='Post',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='Post',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='Post',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='Post',
            arguments={'where': where},
            root_selection=['count'],
        )



class UserActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> models.User:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='User',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.User.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='User',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[models.User]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='User',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.User.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[models.User]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='User',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.User.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
    ) -> List[models.User]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='User',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.User.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
    ) -> Optional[models.User]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='User',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.User.parse_obj(result)

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[models.User]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='User',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.User.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> models.User:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.User.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='User',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='User',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='User',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class UserBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='User',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='User',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='User',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='User',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='User',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='User',
            arguments={'where': where},
            root_selection=['count'],
        )



class MActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.MCreateInput,
        include: Optional[types.MInclude] = None
    ) -> models.M:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='M',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.M.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='M',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[models.M]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='M',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.M.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[models.M]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='M',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.M.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
        include: Optional[types.MInclude] = None,
        order: Optional[Union[types.MOrderByInput, List[types.MOrderByInput]]] = None,
    ) -> List[models.M]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='M',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.M.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
        include: Optional[types.MInclude] = None,
        order: Optional[Union[types.MOrderByInput, List[types.MOrderByInput]]] = None,
    ) -> Optional[models.M]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='M',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.M.parse_obj(result)

    async def update(
        self,
        data: types.MUpdateInput,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> Optional[models.M]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='M',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.M.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.MWhereUniqueInput,
        data: types.MUpsertInput,
        include: Optional[types.MInclude] = None,
    ) -> models.M:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.M.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.MUpdateManyMutationInput,
        where: types.MWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='M',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MWhereInput] = None,
        cursor: Optional[types.MWhereUniqueInput] = None,
        include: Optional[types.MInclude] = None,
        order: Optional[Union[types.MOrderByInput, List[types.MOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='M',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.MWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='M',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class MBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.MCreateInput,
        include: Optional[types.MInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='M',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.MCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='M',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.MUpdateInput,
        where: types.MWhereUniqueInput,
        include: Optional[types.MInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='M',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.MWhereUniqueInput,
        data: types.MUpsertInput,
        include: Optional[types.MInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='M',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.MUpdateManyMutationInput,
        where: types.MWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='M',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.MWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='M',
            arguments={'where': where},
            root_selection=['count'],
        )



class NActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.NCreateInput,
        include: Optional[types.NInclude] = None
    ) -> models.N:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='N',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.N.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='N',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[models.N]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='N',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.N.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[models.N]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='N',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.N.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
        include: Optional[types.NInclude] = None,
        order: Optional[Union[types.NOrderByInput, List[types.NOrderByInput]]] = None,
    ) -> List[models.N]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='N',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.N.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
        include: Optional[types.NInclude] = None,
        order: Optional[Union[types.NOrderByInput, List[types.NOrderByInput]]] = None,
    ) -> Optional[models.N]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='N',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.N.parse_obj(result)

    async def update(
        self,
        data: types.NUpdateInput,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> Optional[models.N]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='N',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.N.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.NWhereUniqueInput,
        data: types.NUpsertInput,
        include: Optional[types.NInclude] = None,
    ) -> models.N:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.N.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.NUpdateManyMutationInput,
        where: types.NWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='N',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NWhereInput] = None,
        cursor: Optional[types.NWhereUniqueInput] = None,
        include: Optional[types.NInclude] = None,
        order: Optional[Union[types.NOrderByInput, List[types.NOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='N',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.NWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='N',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class NBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.NCreateInput,
        include: Optional[types.NInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='N',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.NCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='N',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.NUpdateInput,
        where: types.NWhereUniqueInput,
        include: Optional[types.NInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='N',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.NWhereUniqueInput,
        data: types.NUpsertInput,
        include: Optional[types.NInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='N',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.NUpdateManyMutationInput,
        where: types.NWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='N',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.NWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='N',
            arguments={'where': where},
            root_selection=['count'],
        )



class OneOptionalActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.OneOptionalCreateInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> models.OneOptional:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='OneOptional',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.OneOptional.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OneOptionalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='OneOptional',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[models.OneOptional]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='OneOptional',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.OneOptional.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[models.OneOptional]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.OneOptional.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
        include: Optional[types.OneOptionalInclude] = None,
        order: Optional[Union[types.OneOptionalOrderByInput, List[types.OneOptionalOrderByInput]]] = None,
    ) -> List[models.OneOptional]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='OneOptional',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.OneOptional.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
        include: Optional[types.OneOptionalInclude] = None,
        order: Optional[Union[types.OneOptionalOrderByInput, List[types.OneOptionalOrderByInput]]] = None,
    ) -> Optional[models.OneOptional]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='OneOptional',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.OneOptional.parse_obj(result)

    async def update(
        self,
        data: types.OneOptionalUpdateInput,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> Optional[models.OneOptional]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='OneOptional',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.OneOptional.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.OneOptionalWhereUniqueInput,
        data: types.OneOptionalUpsertInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> models.OneOptional:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.OneOptional.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.OneOptionalUpdateManyMutationInput,
        where: types.OneOptionalWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='OneOptional',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OneOptionalWhereInput] = None,
        cursor: Optional[types.OneOptionalWhereUniqueInput] = None,
        include: Optional[types.OneOptionalInclude] = None,
        order: Optional[Union[types.OneOptionalOrderByInput, List[types.OneOptionalOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='OneOptional',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.OneOptionalWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='OneOptional',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class OneOptionalBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.OneOptionalCreateInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='OneOptional',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.OneOptionalCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='OneOptional',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.OneOptionalUpdateInput,
        where: types.OneOptionalWhereUniqueInput,
        include: Optional[types.OneOptionalInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='OneOptional',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.OneOptionalWhereUniqueInput,
        data: types.OneOptionalUpsertInput,
        include: Optional[types.OneOptionalInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='OneOptional',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.OneOptionalUpdateManyMutationInput,
        where: types.OneOptionalWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='OneOptional',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.OneOptionalWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='OneOptional',
            arguments={'where': where},
            root_selection=['count'],
        )



class ManyRequiredActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.ManyRequiredCreateInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> models.ManyRequired:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.ManyRequired.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ManyRequiredCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='ManyRequired',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[models.ManyRequired]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='ManyRequired',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.ManyRequired.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[models.ManyRequired]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.ManyRequired.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
        include: Optional[types.ManyRequiredInclude] = None,
        order: Optional[Union[types.ManyRequiredOrderByInput, List[types.ManyRequiredOrderByInput]]] = None,
    ) -> List[models.ManyRequired]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='ManyRequired',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.ManyRequired.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
        include: Optional[types.ManyRequiredInclude] = None,
        order: Optional[Union[types.ManyRequiredOrderByInput, List[types.ManyRequiredOrderByInput]]] = None,
    ) -> Optional[models.ManyRequired]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='ManyRequired',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.ManyRequired.parse_obj(result)

    async def update(
        self,
        data: types.ManyRequiredUpdateInput,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> Optional[models.ManyRequired]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='ManyRequired',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.ManyRequired.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        data: types.ManyRequiredUpsertInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> models.ManyRequired:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.ManyRequired.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ManyRequiredUpdateManyMutationInput,
        where: types.ManyRequiredWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='ManyRequired',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ManyRequiredWhereInput] = None,
        cursor: Optional[types.ManyRequiredWhereUniqueInput] = None,
        include: Optional[types.ManyRequiredInclude] = None,
        order: Optional[Union[types.ManyRequiredOrderByInput, List[types.ManyRequiredOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='ManyRequired',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.ManyRequiredWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='ManyRequired',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ManyRequiredBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ManyRequiredCreateInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ManyRequiredCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='ManyRequired',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.ManyRequiredUpdateInput,
        where: types.ManyRequiredWhereUniqueInput,
        include: Optional[types.ManyRequiredInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='ManyRequired',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.ManyRequiredWhereUniqueInput,
        data: types.ManyRequiredUpsertInput,
        include: Optional[types.ManyRequiredInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='ManyRequired',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.ManyRequiredUpdateManyMutationInput,
        where: types.ManyRequiredWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='ManyRequired',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.ManyRequiredWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='ManyRequired',
            arguments={'where': where},
            root_selection=['count'],
        )



class AActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.ACreateInput,
        include: Optional[types.AInclude] = None
    ) -> models.A:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='A',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.A.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ACreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='A',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[models.A]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='A',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.A.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[models.A]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='A',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.A.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
        include: Optional[types.AInclude] = None,
        order: Optional[Union[types.AOrderByInput, List[types.AOrderByInput]]] = None,
    ) -> List[models.A]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='A',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.A.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
        include: Optional[types.AInclude] = None,
        order: Optional[Union[types.AOrderByInput, List[types.AOrderByInput]]] = None,
    ) -> Optional[models.A]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='A',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.A.parse_obj(result)

    async def update(
        self,
        data: types.AUpdateInput,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> Optional[models.A]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='A',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.A.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.AWhereUniqueInput,
        data: types.AUpsertInput,
        include: Optional[types.AInclude] = None,
    ) -> models.A:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.A.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.AUpdateManyMutationInput,
        where: types.AWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='A',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AWhereInput] = None,
        cursor: Optional[types.AWhereUniqueInput] = None,
        include: Optional[types.AInclude] = None,
        order: Optional[Union[types.AOrderByInput, List[types.AOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='A',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.AWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='A',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class ABatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ACreateInput,
        include: Optional[types.AInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='A',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ACreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='A',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.AUpdateInput,
        where: types.AWhereUniqueInput,
        include: Optional[types.AInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='A',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.AWhereUniqueInput,
        data: types.AUpsertInput,
        include: Optional[types.AInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='A',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.AUpdateManyMutationInput,
        where: types.AWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='A',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.AWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='A',
            arguments={'where': where},
            root_selection=['count'],
        )



class BActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.BCreateInput,
        include: Optional[types.BInclude] = None
    ) -> models.B:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='B',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.B.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.BCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='B',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[models.B]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='B',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.B.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[models.B]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='B',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.B.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
        include: Optional[types.BInclude] = None,
        order: Optional[Union[types.BOrderByInput, List[types.BOrderByInput]]] = None,
    ) -> List[models.B]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='B',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.B.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
        include: Optional[types.BInclude] = None,
        order: Optional[Union[types.BOrderByInput, List[types.BOrderByInput]]] = None,
    ) -> Optional[models.B]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='B',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.B.parse_obj(result)

    async def update(
        self,
        data: types.BUpdateInput,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> Optional[models.B]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='B',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.B.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.BWhereUniqueInput,
        data: types.BUpsertInput,
        include: Optional[types.BInclude] = None,
    ) -> models.B:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.B.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.BUpdateManyMutationInput,
        where: types.BWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='B',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.BWhereInput] = None,
        cursor: Optional[types.BWhereUniqueInput] = None,
        include: Optional[types.BInclude] = None,
        order: Optional[Union[types.BOrderByInput, List[types.BOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='B',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.BWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='B',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class BBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.BCreateInput,
        include: Optional[types.BInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='B',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.BCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='B',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.BUpdateInput,
        where: types.BWhereUniqueInput,
        include: Optional[types.BInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='B',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.BWhereUniqueInput,
        data: types.BUpsertInput,
        include: Optional[types.BInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='B',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.BUpdateManyMutationInput,
        where: types.BWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='B',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.BWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='B',
            arguments={'where': where},
            root_selection=['count'],
        )



class CActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.CCreateInput,
        include: Optional[types.CInclude] = None
    ) -> models.C:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='C',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.C.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.CCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='C',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[models.C]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='C',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.C.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[models.C]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='C',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.C.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
        include: Optional[types.CInclude] = None,
        order: Optional[Union[types.COrderByInput, List[types.COrderByInput]]] = None,
    ) -> List[models.C]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='C',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.C.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
        include: Optional[types.CInclude] = None,
        order: Optional[Union[types.COrderByInput, List[types.COrderByInput]]] = None,
    ) -> Optional[models.C]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='C',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.C.parse_obj(result)

    async def update(
        self,
        data: types.CUpdateInput,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> Optional[models.C]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='C',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.C.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.CWhereUniqueInput,
        data: types.CUpsertInput,
        include: Optional[types.CInclude] = None,
    ) -> models.C:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.C.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.CUpdateManyMutationInput,
        where: types.CWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='C',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.CWhereInput] = None,
        cursor: Optional[types.CWhereUniqueInput] = None,
        include: Optional[types.CInclude] = None,
        order: Optional[Union[types.COrderByInput, List[types.COrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='C',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.CWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='C',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class CBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.CCreateInput,
        include: Optional[types.CInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='C',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.CCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='C',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.CUpdateInput,
        where: types.CWhereUniqueInput,
        include: Optional[types.CInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='C',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.CWhereUniqueInput,
        data: types.CUpsertInput,
        include: Optional[types.CInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='C',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.CUpdateManyMutationInput,
        where: types.CWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='C',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.CWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='C',
            arguments={'where': where},
            root_selection=['count'],
        )



class DActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.DCreateInput,
        include: Optional[types.DInclude] = None
    ) -> models.D:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='D',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.D.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.DCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='D',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[models.D]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='D',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.D.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[models.D]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='D',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.D.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
        include: Optional[types.DInclude] = None,
        order: Optional[Union[types.DOrderByInput, List[types.DOrderByInput]]] = None,
    ) -> List[models.D]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='D',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.D.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
        include: Optional[types.DInclude] = None,
        order: Optional[Union[types.DOrderByInput, List[types.DOrderByInput]]] = None,
    ) -> Optional[models.D]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='D',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.D.parse_obj(result)

    async def update(
        self,
        data: types.DUpdateInput,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> Optional[models.D]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='D',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.D.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.DWhereUniqueInput,
        data: types.DUpsertInput,
        include: Optional[types.DInclude] = None,
    ) -> models.D:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.D.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.DUpdateManyMutationInput,
        where: types.DWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='D',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DWhereInput] = None,
        cursor: Optional[types.DWhereUniqueInput] = None,
        include: Optional[types.DInclude] = None,
        order: Optional[Union[types.DOrderByInput, List[types.DOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='D',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.DWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='D',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class DBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.DCreateInput,
        include: Optional[types.DInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='D',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.DCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='D',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.DUpdateInput,
        where: types.DWhereUniqueInput,
        include: Optional[types.DInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='D',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.DWhereUniqueInput,
        data: types.DUpsertInput,
        include: Optional[types.DInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='D',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.DUpdateManyMutationInput,
        where: types.DWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='D',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.DWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='D',
            arguments={'where': where},
            root_selection=['count'],
        )



class EActions:
    def __init__(self, client: Client):
        self._client = client

    async def create(
        self,
        data: types.ECreateInput,
        include: Optional[types.EInclude] = None
    ) -> models.E:
        resp = await self._client._execute(
            operation='mutation',
            method='createOne',
            model='E',
            arguments={
                'data': data,
                'include': include,
            },
        )
        return models.E.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ECreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            operation='mutation',
            method='createMany',
            model='E',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[models.E]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='deleteOne',
                model='E',
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.E.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[models.E]:
        resp = await self._client._execute(
            operation='query',
            method='findUnique',
            model='E',
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.E.parse_obj(result)

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
        include: Optional[types.EInclude] = None,
        order: Optional[Union[types.EOrderByInput, List[types.EOrderByInput]]] = None,
    ) -> List[models.E]:
        resp = await self._client._execute(
            operation='query',
            method='findMany',
            model='E',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
            },
        )
        return [models.E.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
        include: Optional[types.EInclude] = None,
        order: Optional[Union[types.EOrderByInput, List[types.EOrderByInput]]] = None,
    ) -> Optional[models.E]:
        resp = await self._client._execute(
            operation='query',
            method='findFirst',
            model='E',
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return models.E.parse_obj(result)

    async def update(
        self,
        data: types.EUpdateInput,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> Optional[models.E]:
        try:
            resp = await self._client._execute(
                operation='mutation',
                method='updateOne',
                model='E',
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return models.E.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.EWhereUniqueInput,
        data: types.EUpsertInput,
        include: Optional[types.EInclude] = None,
    ) -> models.E:
        resp = await self._client._execute(
            operation='mutation',
            method='upsertOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return models.E.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.EUpdateManyMutationInput,
        where: types.EWhereInput,
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='updateMany',
            model='E',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def count(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.EWhereInput] = None,
        cursor: Optional[types.EWhereUniqueInput] = None,
        include: Optional[types.EInclude] = None,
        order: Optional[Union[types.EOrderByInput, List[types.EOrderByInput]]] = None,
    ) -> int:
        # TODO: support select
        resp = await self._client._execute(
            operation='query',
            method='aggregate',
            model='E',
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
            },
            root_selection=['count { _all }'],
        )
        return cast(int, resp['data']['result']['count']['_all'])

    async def delete_many(
        self,
        where: Optional[types.EWhereInput] = None
    ) -> int:
        resp = await self._client._execute(
            operation='mutation',
            method='deleteMany',
            model='E',
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class EBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.ECreateInput,
        include: Optional[types.EInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='createOne',
            model='E',
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.ECreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if self._batcher._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        self._batcher._add(
            operation='mutation',
            method='createMany',
            model='E',
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.EUpdateInput,
        where: types.EWhereUniqueInput,
        include: Optional[types.EInclude] = None
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateOne',
            model='E',
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.EWhereUniqueInput,
        data: types.EUpsertInput,
        include: Optional[types.EInclude] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='upsertOne',
            model='E',
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.EUpdateManyMutationInput,
        where: types.EWhereInput,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='updateMany',
            model='E',
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.EWhereInput] = None,
    ) -> None:
        self._batcher._add(
            operation='mutation',
            method='deleteMany',
            model='E',
            arguments={'where': where},
            root_selection=['count'],
        )


