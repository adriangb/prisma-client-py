# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 8):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template models.py.jinja --
import os
from pydantic import BaseConfig, BaseModel, Field

from . import types, enums, errors
from .generator import partial_models_ctx, PartialModelField


class Config(BaseConfig):
    use_enum_values = True
    allow_population_by_field_name = True


_created_partial_types: Set[str] = set()


class Post(BaseModel):
    id: int
    created_at: datetime.datetime
    title: str
    content: Optional[str]
    published: bool
    author: Optional['models.User']
    author_id: int

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.PostKeys']] = None,
        exclude: Optional[Iterable['types.PostKeys']] = None,
        required: Optional[Iterable['types.PostKeys']] = None,
        optional: Optional[Iterable['types.PostKeys']] = None,
        relations: Optional[Mapping['types.PostRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.PostKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _Post_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _Post_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _Post_fields.items()
                    if key not in exclude
                }
            else:
                fields = _Post_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _Post_relational_fields:
                        raise errors.UnknownRelationalFieldError('Post', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid Post / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class User(BaseModel):
    id: int
    email: str
    int: int
    optional_int: Optional[int]
    float: float
    optional_float: Optional[float]
    string: str
    optional_string: Optional[str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: bool
    optional_boolean: Optional[bool]
    posts: Optional[List['models.Post']]
    string_list: List[str]

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.UserKeys']] = None,
        exclude: Optional[Iterable['types.UserKeys']] = None,
        required: Optional[Iterable['types.UserKeys']] = None,
        optional: Optional[Iterable['types.UserKeys']] = None,
        relations: Optional[Mapping['types.UserRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.UserKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _User_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _User_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _User_fields.items()
                    if key not in exclude
                }
            else:
                fields = _User_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _User_relational_fields:
                        raise errors.UnknownRelationalFieldError('User', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid User / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class M(BaseModel):
    id: int
    n: Optional[List['models.N']]
    int: int
    optional_int: Optional[int]
    float: float
    optional_float: Optional[float]
    string: str
    optional_string: Optional[str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: bool
    optional_boolean: Optional[bool]

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.MKeys']] = None,
        exclude: Optional[Iterable['types.MKeys']] = None,
        required: Optional[Iterable['types.MKeys']] = None,
        optional: Optional[Iterable['types.MKeys']] = None,
        relations: Optional[Mapping['types.MRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.MKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _M_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _M_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _M_fields.items()
                    if key not in exclude
                }
            else:
                fields = _M_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _M_relational_fields:
                        raise errors.UnknownRelationalFieldError('M', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid M / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class N(BaseModel):
    id: int
    m: Optional[List['models.M']]
    int: int
    optional_int: Optional[int]
    float: float
    optional_float: Optional[float]
    string: str
    optional_string: Optional[str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: bool
    optional_boolean: Optional[bool]

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.NKeys']] = None,
        exclude: Optional[Iterable['types.NKeys']] = None,
        required: Optional[Iterable['types.NKeys']] = None,
        optional: Optional[Iterable['types.NKeys']] = None,
        relations: Optional[Mapping['types.NRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.NKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _N_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _N_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _N_fields.items()
                    if key not in exclude
                }
            else:
                fields = _N_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _N_relational_fields:
                        raise errors.UnknownRelationalFieldError('N', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid N / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class OneOptional(BaseModel):
    id: int
    many: Optional[List['models.ManyRequired']]
    int: int
    optional_int: Optional[int]
    float: float
    optional_float: Optional[float]
    string: str
    optional_string: Optional[str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: bool
    optional_boolean: Optional[bool]

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.OneOptionalKeys']] = None,
        exclude: Optional[Iterable['types.OneOptionalKeys']] = None,
        required: Optional[Iterable['types.OneOptionalKeys']] = None,
        optional: Optional[Iterable['types.OneOptionalKeys']] = None,
        relations: Optional[Mapping['types.OneOptionalRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.OneOptionalKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _OneOptional_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _OneOptional_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _OneOptional_fields.items()
                    if key not in exclude
                }
            else:
                fields = _OneOptional_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _OneOptional_relational_fields:
                        raise errors.UnknownRelationalFieldError('OneOptional', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid OneOptional / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class ManyRequired(BaseModel):
    id: int
    one: Optional['models.OneOptional']
    one_optional_id: Optional[int]
    int: int
    optional_int: Optional[int]
    float: float
    optional_float: Optional[float]
    string: str
    optional_string: Optional[str]
    enum: 'enums.ABeautifulEnum'
    optional_enum: Optional['enums.ABeautifulEnum']
    boolean: bool
    optional_boolean: Optional[bool]

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.ManyRequiredKeys']] = None,
        exclude: Optional[Iterable['types.ManyRequiredKeys']] = None,
        required: Optional[Iterable['types.ManyRequiredKeys']] = None,
        optional: Optional[Iterable['types.ManyRequiredKeys']] = None,
        relations: Optional[Mapping['types.ManyRequiredRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.ManyRequiredKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _ManyRequired_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _ManyRequired_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _ManyRequired_fields.items()
                    if key not in exclude
                }
            else:
                fields = _ManyRequired_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                for field, type_ in relations.items():
                    if field not in _ManyRequired_relational_fields:
                        raise errors.UnknownRelationalFieldError('ManyRequired', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid ManyRequired / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class A(BaseModel):
    id: str
    email: str
    name: Optional[str]
    int: int
    sInt: int
    inc_int: int
    inc_sInt: int

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.AKeys']] = None,
        exclude: Optional[Iterable['types.AKeys']] = None,
        required: Optional[Iterable['types.AKeys']] = None,
        optional: Optional[Iterable['types.AKeys']] = None,
        relations: Optional[Mapping['types.ARelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.AKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _A_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _A_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _A_fields.items()
                    if key not in exclude
                }
            else:
                fields = _A_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "A" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid A / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class B(BaseModel):
    id: str
    float: float
    d_float: float

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.BKeys']] = None,
        exclude: Optional[Iterable['types.BKeys']] = None,
        required: Optional[Iterable['types.BKeys']] = None,
        optional: Optional[Iterable['types.BKeys']] = None,
        relations: Optional[Mapping['types.BRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.BKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _B_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _B_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _B_fields.items()
                    if key not in exclude
                }
            else:
                fields = _B_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "B" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid B / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class C(BaseModel):
    id: str
    char: str
    v_char: str
    text: str
    bit: str
    v_bit: str
    uuid: str

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.CKeys']] = None,
        exclude: Optional[Iterable['types.CKeys']] = None,
        required: Optional[Iterable['types.CKeys']] = None,
        optional: Optional[Iterable['types.CKeys']] = None,
        relations: Optional[Mapping['types.CRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.CKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _C_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _C_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _C_fields.items()
                    if key not in exclude
                }
            else:
                fields = _C_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "C" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid C / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class D(BaseModel):
    id: str
    bool: bool
    xml: str

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.DKeys']] = None,
        exclude: Optional[Iterable['types.DKeys']] = None,
        required: Optional[Iterable['types.DKeys']] = None,
        optional: Optional[Iterable['types.DKeys']] = None,
        relations: Optional[Mapping['types.DRelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.DKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _D_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _D_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _D_fields.items()
                    if key not in exclude
                }
            else:
                fields = _D_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "D" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid D / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)


class E(BaseModel):
    id: str
    date: datetime.datetime
    time: datetime.datetime
    ts: datetime.datetime

    Config = Config

    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.EKeys']] = None,
        exclude: Optional[Iterable['types.EKeys']] = None,
        required: Optional[Iterable['types.EKeys']] = None,
        optional: Optional[Iterable['types.EKeys']] = None,
        relations: Optional[Mapping['types.ERelationalFieldKeys', str]] = None,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None and exclude is not None:
            raise TypeError(f'Exclude and include are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        fields: Dict['types.EKeys', PartialModelField] = {}

        try:
            if include:
                for field in include:
                    fields[field] = _E_fields[field]
            elif exclude:
                for field in exclude:
                    if field not in _E_fields:
                        raise KeyError(field)

                fields = {
                    key: data
                    for key, data in _E_fields.items()
                    if key not in exclude
                }
            else:
                fields = _E_fields.copy()

            if required:
                for field in required:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field] = fields[field].copy()
                    fields[field]['optional'] = True

            if relations:
                raise ValueError('Model: "E" has no relational fields.')
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid E / {name} field.'
            ) from None

        models = partial_models_ctx.get()

        # mypy does not like this as we are assigning a
        # Dict[Literal[str]] to a Dict[str] but this is fine
        models[name] = fields  # type: ignore[assignment]
        partial_models_ctx.set(models)
        _created_partial_types.add(name)



_Post_relational_fields: Set[str] = {
        'author',
    }
_Post_fields: Dict['types.PostKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'created_at': {
        'name': 'created_at',
        'is_list': False,
        'optional': False,
        'type': 'datetime.datetime',
    },
    'title': {
        'name': 'title',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'content': {
        'name': 'content',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'published': {
        'name': 'published',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'author': {
        'name': 'author',
        'is_list': False,
        'optional': True,
        'type': 'models.User',
    },
    'author_id': {
        'name': 'author_id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
}

_User_relational_fields: Set[str] = {
        'posts',
    }
_User_fields: Dict['types.UserKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'email': {
        'name': 'email',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'optional_int': {
        'name': 'optional_int',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'optional_float': {
        'name': 'optional_float',
        'is_list': False,
        'optional': True,
        'type': 'float',
    },
    'string': {
        'name': 'string',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'optional_string': {
        'name': 'optional_string',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'enum': {
        'name': 'enum',
        'is_list': False,
        'optional': False,
        'type': 'enums.ABeautifulEnum',
    },
    'optional_enum': {
        'name': 'optional_enum',
        'is_list': False,
        'optional': True,
        'type': 'enums.ABeautifulEnum',
    },
    'boolean': {
        'name': 'boolean',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'optional_boolean': {
        'name': 'optional_boolean',
        'is_list': False,
        'optional': True,
        'type': 'bool',
    },
    'posts': {
        'name': 'posts',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.Post\']',
    },
}

_M_relational_fields: Set[str] = {
        'n',
    }
_M_fields: Dict['types.MKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'n': {
        'name': 'n',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.N\']',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'optional_int': {
        'name': 'optional_int',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'optional_float': {
        'name': 'optional_float',
        'is_list': False,
        'optional': True,
        'type': 'float',
    },
    'string': {
        'name': 'string',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'optional_string': {
        'name': 'optional_string',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'enum': {
        'name': 'enum',
        'is_list': False,
        'optional': False,
        'type': 'enums.ABeautifulEnum',
    },
    'optional_enum': {
        'name': 'optional_enum',
        'is_list': False,
        'optional': True,
        'type': 'enums.ABeautifulEnum',
    },
    'boolean': {
        'name': 'boolean',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'optional_boolean': {
        'name': 'optional_boolean',
        'is_list': False,
        'optional': True,
        'type': 'bool',
    },
}

_N_relational_fields: Set[str] = {
        'm',
    }
_N_fields: Dict['types.NKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'm': {
        'name': 'm',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.M\']',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'optional_int': {
        'name': 'optional_int',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'optional_float': {
        'name': 'optional_float',
        'is_list': False,
        'optional': True,
        'type': 'float',
    },
    'string': {
        'name': 'string',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'optional_string': {
        'name': 'optional_string',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'enum': {
        'name': 'enum',
        'is_list': False,
        'optional': False,
        'type': 'enums.ABeautifulEnum',
    },
    'optional_enum': {
        'name': 'optional_enum',
        'is_list': False,
        'optional': True,
        'type': 'enums.ABeautifulEnum',
    },
    'boolean': {
        'name': 'boolean',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'optional_boolean': {
        'name': 'optional_boolean',
        'is_list': False,
        'optional': True,
        'type': 'bool',
    },
}

_OneOptional_relational_fields: Set[str] = {
        'many',
    }
_OneOptional_fields: Dict['types.OneOptionalKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'many': {
        'name': 'many',
        'is_list': True,
        'optional': True,
        'type': 'List[\'models.ManyRequired\']',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'optional_int': {
        'name': 'optional_int',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'optional_float': {
        'name': 'optional_float',
        'is_list': False,
        'optional': True,
        'type': 'float',
    },
    'string': {
        'name': 'string',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'optional_string': {
        'name': 'optional_string',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'enum': {
        'name': 'enum',
        'is_list': False,
        'optional': False,
        'type': 'enums.ABeautifulEnum',
    },
    'optional_enum': {
        'name': 'optional_enum',
        'is_list': False,
        'optional': True,
        'type': 'enums.ABeautifulEnum',
    },
    'boolean': {
        'name': 'boolean',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'optional_boolean': {
        'name': 'optional_boolean',
        'is_list': False,
        'optional': True,
        'type': 'bool',
    },
}

_ManyRequired_relational_fields: Set[str] = {
        'one',
    }
_ManyRequired_fields: Dict['types.ManyRequiredKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'one': {
        'name': 'one',
        'is_list': False,
        'optional': True,
        'type': 'models.OneOptional',
    },
    'one_optional_id': {
        'name': 'one_optional_id',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'optional_int': {
        'name': 'optional_int',
        'is_list': False,
        'optional': True,
        'type': 'int',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'optional_float': {
        'name': 'optional_float',
        'is_list': False,
        'optional': True,
        'type': 'float',
    },
    'string': {
        'name': 'string',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'optional_string': {
        'name': 'optional_string',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'enum': {
        'name': 'enum',
        'is_list': False,
        'optional': False,
        'type': 'enums.ABeautifulEnum',
    },
    'optional_enum': {
        'name': 'optional_enum',
        'is_list': False,
        'optional': True,
        'type': 'enums.ABeautifulEnum',
    },
    'boolean': {
        'name': 'boolean',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'optional_boolean': {
        'name': 'optional_boolean',
        'is_list': False,
        'optional': True,
        'type': 'bool',
    },
}

_A_relational_fields: Set[str] = set()
_A_fields: Dict['types.AKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'email': {
        'name': 'email',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'name': {
        'name': 'name',
        'is_list': False,
        'optional': True,
        'type': 'str',
    },
    'int': {
        'name': 'int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'sInt': {
        'name': 'sInt',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'inc_int': {
        'name': 'inc_int',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
    'inc_sInt': {
        'name': 'inc_sInt',
        'is_list': False,
        'optional': False,
        'type': 'int',
    },
}

_B_relational_fields: Set[str] = set()
_B_fields: Dict['types.BKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'float': {
        'name': 'float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
    'd_float': {
        'name': 'd_float',
        'is_list': False,
        'optional': False,
        'type': 'float',
    },
}

_C_relational_fields: Set[str] = set()
_C_fields: Dict['types.CKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'char': {
        'name': 'char',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'v_char': {
        'name': 'v_char',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'text': {
        'name': 'text',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'bit': {
        'name': 'bit',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'v_bit': {
        'name': 'v_bit',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'uuid': {
        'name': 'uuid',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
}

_D_relational_fields: Set[str] = set()
_D_fields: Dict['types.DKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'bool': {
        'name': 'bool',
        'is_list': False,
        'optional': False,
        'type': 'bool',
    },
    'xml': {
        'name': 'xml',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
}

_E_relational_fields: Set[str] = set()
_E_fields: Dict['types.EKeys', PartialModelField] = {
    'id': {
        'name': 'id',
        'is_list': False,
        'optional': False,
        'type': 'str',
    },
    'date': {
        'name': 'date',
        'is_list': False,
        'optional': False,
        'type': 'datetime.datetime',
    },
    'time': {
        'name': 'time',
        'is_list': False,
        'optional': False,
        'type': 'datetime.datetime',
    },
    'ts': {
        'name': 'ts',
        'is_list': False,
        'optional': False,
        'type': 'datetime.datetime',
    },
}



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models

# required to support relationships between models
Post.update_forward_refs()
User.update_forward_refs()
M.update_forward_refs()
N.update_forward_refs()
OneOptional.update_forward_refs()
ManyRequired.update_forward_refs()
A.update_forward_refs()
B.update_forward_refs()
C.update_forward_refs()
D.update_forward_refs()
E.update_forward_refs()
